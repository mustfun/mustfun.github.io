<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序员的天花板</title>
  <subtitle>我命由我不由天</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.vrzart.com/"/>
  <updated>2018-03-23T10:46:39.068Z</updated>
  <id>http://blog.vrzart.com/</id>
  
  <author>
    <name>itar</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Transaction在Controller层的探索</title>
    <link href="http://blog.vrzart.com/2018/03/23/Transaction%E5%9C%A8Controller%E5%B1%82%E7%9A%84%E6%8E%A2%E7%B4%A2/"/>
    <id>http://blog.vrzart.com/2018/03/23/Transaction在Controller层的探索/</id>
    <published>2018-03-23T10:40:56.467Z</published>
    <updated>2018-03-23T10:46:39.068Z</updated>
    
    <content type="html"><![CDATA[<p>#Transaction在Controller层的探索</p>
<blockquote>
<p>一般开发中事务要求我们放在Service层，可是有些情况，我们可能会要求放在Controller层，你有没有碰到过这样的需求呢？那么放到Controller层事务会生效吗？会产生什么问题呢？下面一起来看看</p>
</blockquote>
<h2 id="I、透过现象看本质"><a href="#I、透过现象看本质" class="headerlink" title="I、透过现象看本质"></a>I、透过现象看本质</h2><h3 id="第一种情况"><a href="#第一种情况" class="headerlink" title="第一种情况"></a>第一种情况</h3><ul>
<li><p>Controller层代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/city"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CityControllerImpl</span> <span class="keyword">implements</span> <span class="title">CityController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> CityService cityService;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"getCity"</span>,method = RequestMethod.GET,produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</div><div class="line">  	<span class="meta">@Transcational</span></div><div class="line">    <span class="function"><span class="keyword">public</span> BaseResult&lt;City&gt; <span class="title">getCity</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</div><div class="line">        City one = cityService.getOne(id);</div><div class="line">        BaseResult&lt;City&gt; baseResult=<span class="keyword">new</span> BaseResult&lt;&gt;();</div><div class="line">        baseResult.setData(one);</div><div class="line">        <span class="keyword">return</span> baseResult;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>运行结果</p>
<p><img src="http://ojkdckcc1.bkt.clouddn.com/blog/2018/微信截图_20180320184140.png" alt="Transaction ERROR controller"></p>
</li>
<li><p>对的，你没有看错，当Transactional加载Controller层时出现404异常</p>
</li>
</ul>
<h3 id="第二种情况"><a href="#第二种情况" class="headerlink" title="第二种情况"></a>第二种情况</h3><ul>
<li><p>Controller层代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/city"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CityControllerImpl</span>  </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> CityService cityService;</div><div class="line">  </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"getCity"</span>,method = RequestMethod.GET,produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</div><div class="line">    <span class="meta">@Transactional</span></div><div class="line">    <span class="function"><span class="keyword">public</span> BaseResult&lt;City&gt; <span class="title">getCity</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</div><div class="line">        City one = cityService.getOne(id);</div><div class="line">        BaseResult&lt;City&gt; baseResult=<span class="keyword">new</span> BaseResult&lt;&gt;();</div><div class="line">        baseResult.setData(one);</div><div class="line">        <span class="keyword">return</span> baseResult;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>跟上面的区别，就是没有实现CityController接口了，那么我们运行一下，会有什么结果呢？</p>
</li>
<li><p>运行结果如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  data: null,</div><div class="line">  message: null,</div><div class="line">  status: 0</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>第二种情况居然没有啥问题，那么Transactional是否正常回滚呢？这里答案我直接告诉大家了，即使是换成有数据更改的接口，我们的事务是生效的。</p>
</li>
<li><p>下面我为大家看源码解释一下</p>
</li>
</ul>
<h3 id="第三种情况"><a href="#第三种情况" class="headerlink" title="第三种情况"></a>第三种情况</h3><ul>
<li>笔者测试使用支持==JAX-RS 2.0==的 <strong>Resteasy</strong> 测试，发现是没有这个问题的，大家可以自测一下Jersey是不是存在这个问题，推断应该没有</li>
</ul>
<h2 id="II、熟悉本质解现象"><a href="#II、熟悉本质解现象" class="headerlink" title="II、熟悉本质解现象"></a>II、熟悉本质解现象</h2><h3 id="1-区别"><a href="#1-区别" class="headerlink" title="1. 区别"></a>1. 区别</h3><p>  可以看出，我们两个Controller的区别就是一个有实现接口，一个没有实现，为什么差别会这么大呢？</p>
<h3 id="2-事务的本质"><a href="#2-事务的本质" class="headerlink" title="2. 事务的本质"></a>2. 事务的本质</h3><p>   我们知道事务是基于代理实现的，目前Spring中有JDK动态代理和CGLIB代理两种代理，那么跟Spring选择的代理有没有关系呢？我们看一下Spring在代理类的时候选择使用何种代理的源代码。如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> AopProxy <span class="title">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException </span>&#123;</div><div class="line">		<span class="keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</div><div class="line">			Class&lt;?&gt; targetClass = config.getTargetClass();</div><div class="line">			<span class="keyword">if</span> (targetClass == <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"TargetSource cannot determine target class: "</span> +</div><div class="line">						<span class="string">"Either an interface or a target is required for proxy creation."</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> ObjenesisCglibAopProxy(config);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>这是Spring创建代理比较核心的一段代码，在类  <code>DefaultAopProxyFactory</code> 中，不管加没有加接口，Spring看到了<code>@Transactional</code>注解都会给我们的Controller注册为一个代理对象。注意：<code>Spring并非对所有的Controller都会创建代理类，假如我们的Controller没有暴露任何切面，Spring并不会创建一个代理类</code>，这里可能大家会感到奇怪，我们这里打个TAG，文末讲解。</p>
<p>  继续刚刚的话题，第一种情况，由于我们的Controller有接口，所以就走了JDK代理，相反第二种走了Cglib代理。OK， 我们的CityControllerImpl现在是一个代理类。那么为什么会发生404异常呢？</p>
<h3 id="3-SpringMvc的原理"><a href="#3-SpringMvc的原理" class="headerlink" title="3. SpringMvc的原理"></a>3. SpringMvc的原理</h3><p>  为什么Controller变成代理之后，就会404异常了，肯定跟我们的SpringMVC有关，我们看一下SpringMVC的核心类 <code>AbstractHandlerMethodMapping</code> 这个类可以绑定URL和需要执行处理器的哪个方法。这个抽象类实现了<code>initializingBean</code>接口，其实主要的注册URL操作则是通过这个接口的afterPropertiesSet()接口方法来调用的。然后调用<code>initHandlerMethods</code> 方法进行绑定URL。方法详细如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initHandlerMethods</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">			logger.debug(<span class="string">"Looking for request mappings in application context: "</span> + getApplicationContext());</div><div class="line">		&#125;</div><div class="line">		String[] beanNames = (<span class="keyword">this</span>.detectHandlerMethodsInAncestorContexts ?</div><div class="line">				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(getApplicationContext(), Object.class) :</div><div class="line">				getApplicationContext().getBeanNamesForType(Object.class));</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (String beanName : beanNames) &#123;</div><div class="line">			<span class="keyword">if</span> (!beanName.startsWith(SCOPED_TARGET_NAME_PREFIX)) &#123;</div><div class="line">				Class&lt;?&gt; beanType = <span class="keyword">null</span>;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					beanType = getApplicationContext().getType(beanName);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">					<span class="comment">// An unresolvable bean type, probably from a lazy bean - let's ignore it.</span></div><div class="line">					<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">						logger.debug(<span class="string">"Could not resolve target class for bean with name '"</span> + beanName + <span class="string">"'"</span>, ex);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (beanType != <span class="keyword">null</span> &amp;&amp; isHandler(beanType)) &#123;</div><div class="line">					detectHandlerMethods(beanName);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		handlerMethodsInitialized(getHandlerMethods());</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>beanType中取出来是 <code>CityControllerImpl</code> 代理类，这里大家注意，代码第21行，有一个<code>isHandler</code>方法，这个方法用于判定这个类是不是Handler，其中代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHandler</span><span class="params">(Class&lt;?&gt; beanType)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||</div><div class="line">				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class));</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>看到这里相信大家已经很明白了，这里就是看你这个类上面有没有Controller注解和RequestMapping注解。如果有，就建立相关的映射关系（URL-&gt;Handler）</p>
<ul>
<li><p>其中有接口的是被JDK代理的，生成的是JDK代理类</p>
<blockquote>
<p>JDK的动态代理是靠多态和反射来实现的，它生成的代理类需要实现你传入的接口，并通过反射来得到接口的方法对象，并将此方法对象传参给增强类的invoke方法去执行，从而实现了代理功能。</p>
</blockquote>
<p>CityController生成的代理类文件如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">cityControllerImpl</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Proxy86</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m32;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m7;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">cityControllerImpl</span><span class="params">(InvocationHandler var1)</span> <span class="keyword">throws</span>  </span>&#123;</div><div class="line">        <span class="keyword">super</span>(var1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> TargetSource <span class="title">getTargetSource</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> (TargetSource)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m8, (Object[])<span class="keyword">null</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</div><div class="line">            <span class="keyword">throw</span> var2;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addAdvice</span><span class="params">(<span class="keyword">int</span> var1, Advice var2)</span> <span class="keyword">throws</span> AopConfigException </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m21, <span class="keyword">new</span> Object[]&#123;var1, var2&#125;);</div><div class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var4) &#123;</div><div class="line">            <span class="keyword">throw</span> var4;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable var5) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var5);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> BaseResult <span class="title">getCity</span><span class="params">(Integer var1)</span> <span class="keyword">throws</span>  </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> (BaseResult)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m27, <span class="keyword">new</span> Object[]&#123;var1&#125;);</div><div class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</div><div class="line">            <span class="keyword">throw</span> var3;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>类已经被精简过，我们看到生成的代理类中完全没有<code>@Controller</code> <code>@RequestMapping</code> 注解，所以isHandler方法执行失败，所以根本不会加到SpringMvc的控制器处理方法中去，当URL请求过来的时候，找不到对应的处理器处理，所以就报404错误啦</p>
</li>
<li><p>没有接口的是被CGLIB代理的，生成的是CGlib代理类</p>
<blockquote>
<p>CGLib采用了非常底层的字节码技术，其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。JDK动态代理与CGLib动态代理均是实现Spring AOP的基础</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CityControllerImpl</span>$$<span class="title">EnhancerBySpringCGLIB</span>$$8<span class="title">cae5808</span> <span class="keyword">extends</span> <span class="title">CityControllerImpl</span> <span class="keyword">implements</span> <span class="title">SpringProxy</span>, <span class="title">Advised</span>, <span class="title">Factory</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> CGLIB$BOUND;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object CGLIB$FACTORY_DATA;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal CGLIB$THREAD_CALLBACKS;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Callback[] CGLIB$STATIC_CALLBACKS;</div><div class="line">  </div><div class="line">    <span class="keyword">final</span> BaseResult CGLIB$getCity$<span class="number">0</span>(Integer var1) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getCity(var1);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> BaseResult <span class="title">getCity</span><span class="params">(Integer var1)</span> </span>&#123;</div><div class="line">        MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.CGLIB$CALLBACK_0 == <span class="keyword">null</span>) &#123;</div><div class="line">            CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</div><div class="line">            var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> var10000 != <span class="keyword">null</span> ? (BaseResult)var10000.intercept(<span class="keyword">this</span>, CGLIB$getCity$<span class="number">0</span>$Method, <span class="keyword">new</span> Object[]&#123;var1&#125;, CGLIB$getCity$<span class="number">0</span>$Proxy) : <span class="keyword">super</span>.getCity(var1);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>==其实isHandler方法会代理类的接口和父类进行扫描==，看你有没有这个注解，JDK代理中cityControllerImpl接口和父类都没有注解，而CGlib代理的父类是<code>CityControllerImpl</code> 这个原始的类， 所以返回为真</p>
</li>
</ul>
<h2 id="III、思考"><a href="#III、思考" class="headerlink" title="III、思考"></a>III、思考</h2><p>   如果Controller层不加<code>@Transcational</code>注解的时候，为什么又不会产生404异常呢？其实如果你Controller不加任何织入代码的话（自定义aop切面等，有兴趣的可以用AspectJ试一下织入Controller层的Method方法会发生什么事情），Spring是不会给你的类生成代理的，也就是在<code>AbstractHandlerMethodMapping</code> 绑定的时候，这个类不是一个代理，所以才会匹配成功。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#Transaction在Controller层的探索&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一般开发中事务要求我们放在Service层，可是有些情况，我们可能会要求放在Controller层，你有没有碰到过这样的需求呢？那么放到Controller层事务会生效吗？会产生
    
    </summary>
    
    
      <category term="spring boot" scheme="http://blog.vrzart.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>datatables服务端分页配置</title>
    <link href="http://blog.vrzart.com/2017/12/28/datatables%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%88%86%E9%A1%B5%E9%85%8D%E7%BD%AE%E6%9C%80%E6%96%B0%E6%95%99%E7%A8%8B2018/"/>
    <id>http://blog.vrzart.com/2017/12/28/datatables服务端分页配置最新教程2018/</id>
    <published>2017-12-28T09:12:11.509Z</published>
    <updated>2018-01-15T09:53:26.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="datatables服务端分页配置"><a href="#datatables服务端分页配置" class="headerlink" title="datatables服务端分页配置"></a>datatables服务端分页配置</h1><blockquote>
<p>datatables可以说是个好东西吧，几行js代码就能够让你初始化一个表格，很方便，但是要用好还是很困难的，因为配置太多太多了，网上的大多数是一些陈旧的配置，如果datatables更换了这么多版本，网上很多配置都有一些问题，我这里也不是datatables的基础教程，我这里就谈一下服务端分页怎么配置，因为我项目中用到了，笔以记之。后之览者，亦将有感于斯文~</p>
</blockquote>
<h3 id="一、必备"><a href="#一、必备" class="headerlink" title="一、必备"></a>一、必备</h3><ol>
<li><p>引入</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--引入css--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"https://cdn.datatables.net/1.10.15/css/jquery.dataTables.min.css"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--引入JavaScript--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">src</span>=<span class="string">"//code.jquery.com/jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdn.datatables.net/1.10.15/js/jquery.dataTables.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p>主体</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"example"</span> <span class="attr">class</span>=<span class="string">"display"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"100%"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Position<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Office<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Start date<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Salary<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Position<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Office<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Start date<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Salary<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Tiger Nixon<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>System Architect<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Edinburgh<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>61<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2011/04/25<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$320,800<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		 <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>js代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">'#example'</span>).DataTable();</div><div class="line">&#125; );</div></pre></td></tr></table></figure>
<p>有这三个部分文件放到一个html中，你就可以实例化一个表格了，很容易对吧</p>
</li>
</ol>
<h3 id="二、分页"><a href="#二、分页" class="headerlink" title="二、分页"></a>二、分页</h3><ol>
<li><p>代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> myTable;</div><div class="line">  $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    </div><div class="line">    myTable = $(<span class="string">'#projectTable'</span>).DataTable( &#123;</div><div class="line">        <span class="string">"processing"</span>: <span class="literal">true</span>,<span class="comment">//刷新的那个对话框</span></div><div class="line">        <span class="string">"serverSide"</span>: <span class="literal">true</span>,<span class="comment">//服务器端获取数据</span></div><div class="line">        <span class="string">"paging"</span>: <span class="literal">true</span>,<span class="comment">//开启分页</span></div><div class="line">        lengthMenu: [ <span class="comment">//自定义分页长度</span></div><div class="line">            [ <span class="number">20</span>, <span class="number">50</span>, <span class="number">100</span> ],</div><div class="line">            [ <span class="string">'20 页'</span>, <span class="string">'50 页'</span>, <span class="string">'100页'</span> ]</div><div class="line">        ],</div><div class="line">        <span class="attr">ordering</span>:<span class="literal">false</span>,</div><div class="line">        <span class="string">"ajax"</span>: &#123;</div><div class="line">            <span class="string">"url"</span>: <span class="string">"/api/get_project_list"</span>,</div><div class="line">            <span class="string">"type"</span>: <span class="string">"POST"</span>,</div><div class="line">            <span class="string">"data"</span>: <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">               <span class="comment">//删除多余请求参数</span></div><div class="line">               <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> d)&#123;</div><div class="line">                   <span class="keyword">if</span>(key.indexOf(<span class="string">"columns"</span>)==<span class="number">0</span>||key.indexOf(<span class="string">"order"</span>)==<span class="number">0</span>||key.indexOf(<span class="string">"search"</span>)==<span class="number">0</span>)&#123; <span class="comment">//以columns开头的参数删除</span></div><div class="line">                       <span class="keyword">delete</span> d[key];</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">var</span> searchParams= &#123;</div><div class="line">                <span class="string">"retryType"</span>:$(<span class="string">"#retryType"</span>).val(),</div><div class="line">                <span class="string">"departmentCode"</span>:$(<span class="string">"#departmentCode"</span>).val()!=<span class="string">""</span>?$(<span class="string">"#departmentCode"</span>).val():<span class="literal">null</span>,</div><div class="line">                <span class="string">"projectCode"</span>:$(<span class="string">"#projectCode"</span>).val()!=<span class="string">""</span>?$(<span class="string">"#projectCode"</span>).val():<span class="literal">null</span>,</div><div class="line">                <span class="string">"serviceName"</span>:$(<span class="string">"#serviceName"</span>).val()!=<span class="string">""</span>?$(<span class="string">"#serviceName"</span>).val():<span class="literal">null</span>,</div><div class="line">                <span class="string">"csrfmiddlewaretoken"</span>:csrftoken</div><div class="line">                &#125;;</div><div class="line">               <span class="comment">//附加查询参数</span></div><div class="line">               <span class="keyword">if</span>(searchParams)&#123;</div><div class="line">                   $.extend(d,searchParams); <span class="comment">//给d扩展参数</span></div><div class="line">               &#125;</div><div class="line">            &#125;,</div><div class="line">            <span class="string">"dataType"</span> : <span class="string">"json"</span>,</div><div class="line">            <span class="string">"dataFilter"</span>: <span class="function"><span class="keyword">function</span> (<span class="params">json</span>) </span>&#123;<span class="comment">//json是服务器端返回的数据</span></div><div class="line">                json = <span class="built_in">JSON</span>.parse(json);</div><div class="line">                <span class="keyword">var</span> returnData = &#123;&#125;;</div><div class="line">                returnData.draw = json.data.draw;</div><div class="line">                returnData.recordsTotal = json.data.total;<span class="comment">//返回数据全部记录</span></div><div class="line">                returnData.recordsFiltered = json.data.total;<span class="comment">//后台不实现过滤功能，每次查询均视作全部结果</span></div><div class="line">                returnData.data = json.data.retryProjectList;<span class="comment">//返回的数据列表</span></div><div class="line">                <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(returnData);<span class="comment">//这几个参数都是datatable需要的，必须要</span></div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"searching"</span> : <span class="literal">false</span>,</div><div class="line">        <span class="string">"columns"</span>: [</div><div class="line">            &#123; <span class="string">"data"</span>: <span class="string">"id"</span> &#125;,</div><div class="line">            &#123; <span class="string">"data"</span>: <span class="string">"departmentCode"</span> &#125;,</div><div class="line">            &#123; <span class="string">"data"</span>: <span class="string">"projectCode"</span> &#125;,</div><div class="line">            &#123; <span class="string">"data"</span>: <span class="string">"serviceName"</span> &#125;,</div><div class="line">            &#123; <span class="string">"data"</span>: <span class="string">"alertMail"</span> &#125;,</div><div class="line">            &#123; <span class="string">"data"</span>: <span class="string">"callbackUrl"</span> &#125;,</div><div class="line">            &#123; <span class="string">"data"</span>: <span class="string">"descInfo"</span> &#125;,</div><div class="line">            &#123; <span class="string">"data"</span>: <span class="string">"companyId"</span> &#125;,</div><div class="line">            &#123; <span class="string">"data"</span>: <span class="string">"retryType"</span> &#125;,</div><div class="line">            &#123; <span class="string">"data"</span>: <span class="string">"retryCircle"</span> &#125;,</div><div class="line">            &#123; <span class="string">"data"</span>: <span class="string">"createTime"</span> &#125;,</div><div class="line">            &#123; <span class="string">"data"</span>: <span class="string">"updateTime"</span> &#125;,</div><div class="line">            &#123; <span class="string">"data"</span>: <span class="string">"createUser"</span> &#125;,</div><div class="line">            &#123; <span class="string">"data"</span>: <span class="string">"updateUser"</span>,<span class="string">"defaultContent"</span>: <span class="string">''</span>&#125;,</div><div class="line">            &#123; <span class="string">"data"</span>: <span class="string">"validVal"</span> &#125;,</div><div class="line">            &#123; <span class="string">"data"</span>: <span class="string">"retryTimes"</span> &#125;</div><div class="line">        ],</div><div class="line">        <span class="string">"oLanguage"</span> : &#123; <span class="comment">// 国际化配置</span></div><div class="line">            <span class="string">"sProcessing"</span> : <span class="string">"正在获取数据，请稍后..."</span>,</div><div class="line">            <span class="string">"sLengthMenu"</span> : <span class="string">"显示 _MENU_ 条"</span>,</div><div class="line">            <span class="string">"sZeroRecords"</span> : <span class="string">"没有找到数据"</span>,</div><div class="line">            <span class="string">"sInfo"</span> : <span class="string">"从 _START_ 到  _END_ 条记录 总记录数为 _TOTAL_ 条"</span>,</div><div class="line">            <span class="string">"sInfoEmpty"</span> : <span class="string">"记录数为0"</span>,</div><div class="line">            <span class="string">"sInfoFiltered"</span> : <span class="string">"(全部记录数 _MAX_ 条)"</span>,</div><div class="line">            <span class="string">"sInfoPostFix"</span> : <span class="string">""</span>,</div><div class="line">            <span class="string">"sSearch"</span> : <span class="string">"查询"</span>,</div><div class="line">            <span class="string">"sUrl"</span> : <span class="string">""</span>,</div><div class="line">            <span class="string">"oPaginate"</span> : &#123;</div><div class="line">                <span class="string">"sFirst"</span> : <span class="string">"第一页"</span>,</div><div class="line">                <span class="string">"sPrevious"</span> : <span class="string">"上一页"</span>,</div><div class="line">                <span class="string">"sNext"</span> : <span class="string">"下一页"</span>,</div><div class="line">                <span class="string">"sLast"</span> : <span class="string">"最后一页"</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">  &#125;);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>讲解</p>
<p>大家按照我这个配置去配置基本可以完成datatables服务端分页配置，重点需要讲解的是dataFilter这个配置必须要，必须要，必须要，服务端分页要求我们传递draw，recordsTotal，recordsFiltered，data 这几个字段，请不要写错字母，不然分页就拜拜了，dataFilter 能够帮你解决这个问题，因为你不能总要求服务端有这几个字段吧</p>
</li>
<li><p>注意部分</p>
<p>datatables手动刷新方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myTable.ajax.reload(); <span class="comment">//myTable是上面我实例化的对象</span></div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>Over，也是给自己做个笔记吧~</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;datatables服务端分页配置&quot;&gt;&lt;a href=&quot;#datatables服务端分页配置&quot; class=&quot;headerlink&quot; title=&quot;datatables服务端分页配置&quot;&gt;&lt;/a&gt;datatables服务端分页配置&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;datatables可以说是个好东西吧，几行js代码就能够让你初始化一个表格，很方便，但是要用好还是很困难的，因为配置太多太多了，网上的大多数是一些陈旧的配置，如果datatables更换了这么多版本，网上很多配置都有一些问题，我这里也不是datatables的基础教程，我这里就谈一下服务端分页怎么配置，因为我项目中用到了，笔以记之。后之览者，亦将有感于斯文~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、必备&quot;&gt;&lt;a href=&quot;#一、必备&quot; class=&quot;headerlink&quot; title=&quot;一、必备&quot;&gt;&lt;/a&gt;一、必备&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;引入&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--引入css--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;https://cdn.datatables.net/1.10.15/css/jquery.dataTables.min.css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--引入JavaScript--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;language&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;javascript&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;//code.jquery.com/jquery-1.12.4.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;language&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;javascript&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;https://cdn.datatables.net/1.10.15/js/jquery.dataTables.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="前端" scheme="http://blog.vrzart.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://blog.vrzart.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>利用HttpServletResponseWrapper包装reponse</title>
    <link href="http://blog.vrzart.com/2017/12/22/%E5%88%A9%E7%94%A8HttpServletResponseWrapper%E5%AF%B9reponse%E8%BF%9B%E8%A1%8C%E5%8C%85%E8%A3%85/"/>
    <id>http://blog.vrzart.com/2017/12/22/利用HttpServletResponseWrapper对reponse进行包装/</id>
    <published>2017-12-22T06:22:30.619Z</published>
    <updated>2017-12-22T06:52:11.811Z</updated>
    
    <content type="html"><![CDATA[<p>利用HttpServletResponseWrapper包装reponse</p>
<blockquote>
<p>题记： 很多人或许用Spring的时候统一修改一下reponse信息，比较常见的就是给所有的response加一个status、code、message之类的要求，也有的想把response和request的日志打印出来，那么该如何做呢？那就耐心看看吧</p>
</blockquote>
<h3 id="一、背景介绍"><a href="#一、背景介绍" class="headerlink" title="一、背景介绍"></a>一、背景介绍</h3><p>　　对于上述我们说到的这个需求，有很多中实现方式，比较容易想到的就是拦截器，过滤器等，这里我使用的是过滤器的方式来实现的，一是因为Spring天然就对Filter支持得比较好，二是开发方便容易。</p>
<p>　　对于过滤器的实现方式，我这里也提供2种方式来实现，一种是复制<code>ServletOutputStream</code>的方式，一种是不复制<code>ServletOutputStream</code>的方式，两种方式各有用处，随君选择，后续我会开一篇原理的文章</p>
<a id="more"></a>
<p>　　这里可能有读者疑问了，<code>ServletOutputStream</code> 是什么呀？我们看一下官方文档</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Provides an output stream <span class="keyword">for</span> sending binary data to the client. A ServletOutputStream object is normally retrieved via the ServletResponse.getOutputStream method.</div><div class="line">This is an <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">that</span> <span class="title">the</span> <span class="title">servlet</span> <span class="title">container</span> <span class="keyword">implements</span>. <span class="title">Subclasses</span> <span class="title">of</span> <span class="title">this</span> <span class="title">class</span> <span class="title">must</span> <span class="title">implement</span> <span class="title">the</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">OutputStream</span>.<span class="title">write</span>(<span class="title">int</span>) <span class="title">method</span>.</span></div></pre></td></tr></table></figure>
<p>　　文档里面写得很清楚，说提供一个输出流来向客户端发送数据，一个<code>ServletOutputStream</code>通常是<code>reponse.getOutputStream()</code>方法来得到，子类必须实现write方法。OK，说明我们最后要改的就是这个了，且要通过<code>reponse.getOutputStream()</code>这种方法得到。</p>
<h3 id="二、不复制输出流方式（推荐，简便）"><a href="#二、不复制输出流方式（推荐，简便）" class="headerlink" title="二、不复制输出流方式（推荐，简便）"></a>二、不复制输出流方式（推荐，简便）</h3><ol>
<li><p>首先我们要创建一个Filter，这个Filter继承Spring的`OncePerRequestFilter</p>
<p>　继承这个<code>Filter</code> 跟继承普通的Filter主要区别就是它只会执行一次，在Servlet 3.0 之后，一个Filter可以被多个线程唤醒，这样就可能出现一些问题，所以我们这里使用这个</p>
<p>参考文档：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The dispatcher type javax.servlet.DispatcherType.ASYNC introduced in Servlet <span class="number">3.0</span> means a filter can be invoked in more than one thread over the course of a single request. <span class="function">Some filters only need to filter the initial <span class="title">thread</span> <span class="params">(e.g. request wrapping)</span> <span class="keyword">while</span> others may need to be invoked at least once in each additional thread <span class="keyword">for</span> example <span class="keyword">for</span> setting up thread locals or to perform <span class="keyword">final</span> processing at the very end.</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>ResponseWrapperFilter</code> 代码如下</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Order</span>(Ordered.LOWEST_PRECEDENCE - <span class="number">1</span>)</div><div class="line"><span class="meta">@WebFilter</span>(urlPatterns = &#123;<span class="string">"/common/*"</span>&#125;,filterName = <span class="string">"responseWrapperFilter"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseWrapperFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ResponseWrapperFilter.class);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        ResponseWrapper wrapper = <span class="keyword">new</span> ResponseWrapper(response);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            filterChain.doFilter(request,wrapper);</div><div class="line"></div><div class="line">            String responseStr = <span class="keyword">new</span> String(wrapper.toByteArray(), response.getCharacterEncoding());</div><div class="line">            Object parse = JSON.parse(responseStr);</div><div class="line"></div><div class="line">            BaseResult&lt;Object&gt; baseResult = <span class="keyword">new</span> BaseResult&lt;&gt;();</div><div class="line">            baseResult.setData(parse);</div><div class="line">            <span class="keyword">if</span> (parse <span class="keyword">instanceof</span> JSONObject)&#123;</div><div class="line">                JSONObject resultObject = (JSONObject) parse;</div><div class="line">                <span class="keyword">if</span> (resultObject.containsKey(<span class="string">"status"</span>)&amp;&amp;resultObject.containsKey(<span class="string">"message"</span>)&amp;&amp;resultObject.containsKey(<span class="string">"data"</span>))&#123;</div><div class="line">                    baseResult = JSONObject.parseObject(resultObject.toJSONString(),<span class="keyword">new</span> TypeReference&lt;BaseResult&lt;Object&gt;&gt;()&#123;&#125;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            LOGGER.info(<span class="string">"response is ============&#123;&#125;"</span>,baseResult);</div><div class="line"></div><div class="line">            <span class="comment">//必须设置ContentLength</span></div><div class="line">            response.setContentLength(JSON.toJSONBytes(baseResult).length);</div><div class="line">            <span class="comment">//根据http accept来设置，我这里为了简便直接写json了</span></div><div class="line">            response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</div><div class="line">            response.getOutputStream().write(JSON.toJSONBytes(baseResult));</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            LOGGER.error(<span class="string">"数据包装器执行出错....&#123;&#125;"</span>, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我这个Filter主要作用就是给我们的Reponse加上status，把Controller里面的数据放到data字段里面去，加一个包装。</p>
</li>
<li><p>ResponseWrapper类源代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ByteArrayOutputStream output;</div><div class="line"><span class="keyword">private</span> ServletOutputStream filterOutput;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ResponseWrapper</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(response);</div><div class="line">    output = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 巧妙将ServletOutputStream放到公共变量，解决不能多次读写问题</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (filterOutput == <span class="keyword">null</span>) &#123;</div><div class="line">        filterOutput = <span class="keyword">new</span> ServletOutputStream() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                output.write(b);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWriteListener</span><span class="params">(WriteListener writeListener)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> filterOutput;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] toByteArray() &#123;</div><div class="line">    <span class="keyword">return</span> output.toByteArray();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>BaseResult类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseResult</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2120267584344923858L</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Integer status = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String message = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> T data = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseResult</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseResult</span><span class="params">(Integer status, String message, T data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.status = status;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> status;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(Integer status)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.status = status;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Result&#123;"</span> +</div><div class="line">                <span class="string">"status="</span> + status +</div><div class="line">                <span class="string">", message='"</span> + message + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", data="</span> + data +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>这两个类与现有的Spring项目集成就可以实现将reponse修改的目的了</p>
</li>
<li><p>使用，浏览器访问：<code>localhost:8080/common/getBaseResult</code> 看效果</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">data: &#123;</div><div class="line">imgUrl: "htt://img.baidu.com/images/11.jpg",</div><div class="line">name: "itar"</div><div class="line">&#125;,</div><div class="line">status: 0</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>是不是还漏了一个Controller</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(&#123;<span class="string">"/common"</span>,<span class="string">"/never"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonControllerImpl</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getBaseResult"</span>,method = RequestMethod.GET,produces = MediaType.APPLICATION_JSON_UTF8_VALUE) <span class="meta">@ResponseBody</span> <span class="function"><span class="keyword">public</span> JSONObject <span class="title">getBaseResult</span><span class="params">()</span> </span>&#123;</div><div class="line">        JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</div><div class="line">        jsonObject.put(<span class="string">"imgUrl"</span>,<span class="string">"htt://img.baidu.com/images/11.jpg"</span>);</div><div class="line">        jsonObject.put(<span class="string">"name"</span>,<span class="string">"itar"</span>);</div><div class="line">        <span class="keyword">return</span> jsonObject;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="三、复制输出流方式"><a href="#三、复制输出流方式" class="headerlink" title="三、复制输出流方式"></a>三、复制输出流方式</h3><ol>
<li><p>我们这里的复制输出流主要就是将<code>ServletOutputStream</code> 这个流复制一份，复制出来之后大家可以写写日志呀，做些特殊处理什么的。</p>
</li>
<li><p>主要使用的是apache提供的<code>TeeOutputStream</code>类将输出流复制一份出来。</p>
</li>
<li><p><code>BranchResponseWrapper</code> 类源代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BranchResponseWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletResponseWrapper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 我们的分支流</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> ByteArrayOutputStream output;</div><div class="line">    <span class="keyword">private</span> ServletOutputStream filterOutput;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> OutputStream bufferOutputStream;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BranchResponseWrapper</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(response);</div><div class="line">        <span class="comment">/*try &#123;</span></div><div class="line">            bufferOutputStream = response.getOutputStream();</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;*/</div><div class="line">        output = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 利用TeeOutputStream复制流，解决多次读写问题</div><div class="line">     * 用super.getOutputStream来获取源outputstream，也可以用注释的那种方式获取，传过来</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (filterOutput == <span class="keyword">null</span>) &#123;</div><div class="line">            filterOutput = <span class="keyword">new</span> ServletOutputStream() &#123;</div><div class="line"></div><div class="line">                <span class="comment">//替换构造方法</span></div><div class="line">                <span class="comment">//拿父类的response，初始化的时候，里面还没有数据，只有一些request信息和response信息,但是调用了创建outputStream,</span></div><div class="line">                <span class="comment">//private TeeOutputStream teeOutputStream = new TeeOutputStream(bufferOutputStream,output);</span></div><div class="line">                <span class="keyword">private</span> TeeOutputStream teeOutputStream = <span class="keyword">new</span> TeeOutputStream(BranchResponseWrapper.<span class="keyword">super</span>.getOutputStream(),output);</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWriteListener</span><span class="params">(WriteListener writeListener)</span> </span>&#123;</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                    teeOutputStream.write(b);</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> filterOutput;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] toByteArray() &#123;</div><div class="line">        <span class="keyword">return</span> output.toByteArray();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>BranchResponseWrapperFilter源代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Order</span>(Ordered.LOWEST_PRECEDENCE - <span class="number">1</span>)</div><div class="line"><span class="meta">@WebFilter</span>(urlPatterns = &#123;<span class="string">"/never/*"</span>&#125;,filterName = <span class="string">"branchResponseWrapperFilter"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BranchResponseWrapperFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(BranchResponseWrapperFilter.class);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        BranchResponseWrapper wrapper = <span class="keyword">new</span> BranchResponseWrapper(response);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            filterChain.doFilter(request,wrapper);</div><div class="line"></div><div class="line">            String respStr= <span class="keyword">new</span> String(wrapper.toByteArray(), response.getCharacterEncoding());</div><div class="line">            Object parse = JSON.parse(respStr);</div><div class="line">            JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</div><div class="line">            jsonObject.put(<span class="string">"status"</span>,<span class="number">0</span>);</div><div class="line">            jsonObject.put(<span class="string">"data"</span>,parse);</div><div class="line">            LOGGER.info(<span class="string">"response is ============&#123;&#125;"</span>,jsonObject);</div><div class="line">            response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</div><div class="line">            <span class="comment">//将buffer重置，因为我们要重新写入流进去</span></div><div class="line">            response.resetBuffer();</div><div class="line">            response.setContentLength(JSON.toJSONBytes(jsonObject).length);</div><div class="line">            response.getOutputStream().write(JSON.toJSONBytes(jsonObject));</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            LOGGER.error(<span class="string">"数据包装器执行出错....&#123;&#125;"</span>, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用，浏览器访问：<code>localhost:8080/never/getBaseResult</code> 看效果</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">data: &#123;</div><div class="line">imgUrl: "htt://img.baidu.com/images/11.jpg",</div><div class="line">name: "itar"</div><div class="line">&#125;,</div><div class="line">status: 0</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="四、细节"><a href="#四、细节" class="headerlink" title="四、细节"></a>四、细节</h3><ol>
<li>可能大家注意到了，我这里Filter都是有URLPattern的，都需要配置@WebFilter注解的，Spring Boot中这个注解要生效必须在启动类中写上 <code>@ServletComponentScan</code> ，单纯Spring 应用需要在Web.xml中配置filter。</li>
<li>第二种方式中<code>response.resetBuffer();</code>这句话非常重要，不然会出现<code>FixedLengthOverflowException</code> , 主要作用就是将buffer里面的数据清空</li>
<li>原理说白了就是提前通过你的Filter将ServletOutputStream输出到页面上去，只要执行了write方法，页面就有数据了，大家可以执行测试</li>
</ol>
<h3 id="五、代码下载"><a href="#五、代码下载" class="headerlink" title="五、代码下载"></a>五、代码下载</h3><p>​      <a href="https://github.com/mustfun/resteasy-demo.git" target="_blank" rel="external">点击这里</a> 注意切换到 duplicate_submissions 这个分支</p>
<blockquote>
<p>END ，希望有所帮助</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用HttpServletResponseWrapper包装reponse&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题记： 很多人或许用Spring的时候统一修改一下reponse信息，比较常见的就是给所有的response加一个status、code、message之类的要求，也有的想把response和request的日志打印出来，那么该如何做呢？那就耐心看看吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、背景介绍&quot;&gt;&lt;a href=&quot;#一、背景介绍&quot; class=&quot;headerlink&quot; title=&quot;一、背景介绍&quot;&gt;&lt;/a&gt;一、背景介绍&lt;/h3&gt;&lt;p&gt;　　对于上述我们说到的这个需求，有很多中实现方式，比较容易想到的就是拦截器，过滤器等，这里我使用的是过滤器的方式来实现的，一是因为Spring天然就对Filter支持得比较好，二是开发方便容易。&lt;/p&gt;
&lt;p&gt;　　对于过滤器的实现方式，我这里也提供2种方式来实现，一种是复制&lt;code&gt;ServletOutputStream&lt;/code&gt;的方式，一种是不复制&lt;code&gt;ServletOutputStream&lt;/code&gt;的方式，两种方式各有用处，随君选择，后续我会开一篇原理的文章&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://blog.vrzart.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://blog.vrzart.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring filter原理深入浅出</title>
    <link href="http://blog.vrzart.com/2017/12/21/Spring%20filter%E5%8E%9F%E7%90%86%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/"/>
    <id>http://blog.vrzart.com/2017/12/21/Spring filter原理深入浅出/</id>
    <published>2017-12-21T08:05:00.000Z</published>
    <updated>2017-12-22T02:08:23.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-filter原理深入浅出"><a href="#Spring-filter原理深入浅出" class="headerlink" title="Spring filter原理深入浅出"></a>Spring filter原理深入浅出</h1><blockquote>
<p>在这篇文章中，我会介绍一个请求从浏览器进来，是如何被Spring拦截到的，Spring又是如何处理这个请求的，filter有什么作用，filter的原理等</p>
</blockquote>
<h3 id="一、前置知识"><a href="#一、前置知识" class="headerlink" title="一、前置知识"></a>一、前置知识</h3><p>OK，我们首先介绍一下，请求从浏览器过来，我们的服务器会经历些什么。先看一张jetty的内部结构图</p>
<a id="more"></a>
<p><img src="http://static.open-open.com/lib/uploadImg/20130905/20130905174336_227.jpg" alt="jetty内部组成"></p>
<p>我们看到jetty的核心组件包括了一大堆的<code>*Handler</code> ，对于这些handler，不论任何容器基本都有，可能名称不太相同，笔者这里以undertow这个容器为例，浏览器发送过来的请求，会经过一个<code>FilterHandler</code> 这个handler跟我们今天的主题相关。</p>
<h3 id="二、Request阶段"><a href="#二、Request阶段" class="headerlink" title="二、Request阶段"></a>二、Request阶段</h3><p>先看一下这个handler的处理代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(HttpServerExchange exchange)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ServletRequestContext servletRequestContext = (ServletRequestContext)exchange.getAttachment(ServletRequestContext.ATTACHMENT_KEY);</div><div class="line">        ServletRequest request = servletRequestContext.getServletRequest();</div><div class="line">        ServletResponse response = servletRequestContext.getServletResponse();</div><div class="line">        DispatcherType dispatcher = servletRequestContext.getDispatcherType();</div><div class="line">        Boolean supported = (Boolean)<span class="keyword">this</span>.asyncSupported.get(dispatcher);</div><div class="line">        <span class="keyword">if</span> (supported != <span class="keyword">null</span> &amp;&amp; !supported.booleanValue()) &#123;</div><div class="line">            servletRequestContext.setAsyncSupported(<span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        List&lt;ManagedFilter&gt; filters = (List)<span class="keyword">this</span>.filters.get(dispatcher);</div><div class="line">        <span class="keyword">if</span> (filters == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.next.handleRequest(exchange);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            FilterHandler.FilterChainImpl filterChain = <span class="keyword">new</span> FilterHandler.FilterChainImpl(exchange, filters, <span class="keyword">this</span>.next, <span class="keyword">this</span>.allowNonStandardWrappers);</div><div class="line">            filterChain.doFilter(request, response);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>前面都是拿request和response我们不用看，主要是看后面几行代码，<code>filters</code> 如果我们有配置自己的filter，这里肯定不会为空，那么就走下面的filter 链 ，我们看下FilterHandler里面的doFilter的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> index = <span class="keyword">this</span>.location++;</div><div class="line"><span class="keyword">if</span> (index &gt;= <span class="keyword">this</span>.filters.size()) &#123;</div><div class="line">  <span class="keyword">this</span>.next.handleRequest(<span class="keyword">this</span>.exchange);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  ((ManagedFilter)<span class="keyword">this</span>.filters.get(index)).doFilter(request, response, <span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​         location默认是0，所以会从list里面的第一个元素取起，依次执行，OK，我们知道，filter里面一般会有一个<code>filterChain.doFilter(request, response);</code> 这句话，代表filter链继续执行，这时候，这里的location就会+1 ，变成执行第二个，第三个，链条就转动起来了。终于执行到我们自己写的<code>ResponseWrapperFilter</code> ，这个filter大家可以在我后面的源码里看到，这里我先说有这么一个自己写的filter，我用来包装我们的response，给response做些手脚。哈哈。</p>
<p>​         OK，我们继续，当所有的filter都执行完毕之后，就会开始执行this.next.handleRequest(exchange); 这段代码，也就是在继续执行我们刚才的handler链，next表示的是ServletHandler` 这个类，执行代码如下。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">                servlet = <span class="keyword">this</span>.managedServlet.getServlet();</div><div class="line">                ((Servlet)servlet.getInstance()).service(request, response);</div><div class="line">            &#125; <span class="keyword">catch</span> (UnavailableException var12) &#123;</div><div class="line">                <span class="keyword">if</span> (var12.isPermanent()) &#123;</div><div class="line">                    UndertowServletLogger.REQUEST_LOGGER.stoppingServletDueToPermanentUnavailability(<span class="keyword">this</span>.managedServlet.getServletInfo().getName(), var12);</div><div class="line">                    <span class="keyword">this</span>.managedServlet.stop();</div><div class="line">                    <span class="keyword">this</span>.managedServlet.setPermanentlyUnavailable(<span class="keyword">true</span>);</div><div class="line">                    exchange.setStatusCode(<span class="number">404</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    unavailableUntilUpdater.set(<span class="keyword">this</span>, System.currentTimeMillis() + (<span class="keyword">long</span>)(var12.getUnavailableSeconds() * <span class="number">1000</span>));</div><div class="line">                    UndertowServletLogger.REQUEST_LOGGER.stoppingServletUntilDueToTemporaryUnavailability(<span class="keyword">this</span>.managedServlet.getServletInfo().getName(), <span class="keyword">new</span> Date(until), var12);</div><div class="line">                    exchange.setStatusCode(<span class="number">503</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>一旦掉用了下面这段代码，我们的处理逻辑就会被调用，说白了就是我们Controller里面的那些逻辑就会被调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">((Servlet)servlet.getInstance()).service(request, response);</div></pre></td></tr></table></figure>
<p>这段代码很重要</p>
<h3 id="三、reponse阶段"><a href="#三、reponse阶段" class="headerlink" title="三、reponse阶段"></a>三、reponse阶段</h3><p>​          经过了上面这段代码的执行，我们的filter开始收拢了，所有的filter在执行<code>filterChain.doFilter(request, response);</code>这段代码之后其实代码是还没有执行完的，如果你下面还有写代码的话，大家好好品味一下这句话，是不是这个意思。因为每个filter都去调用下一个filter了，等最后一个filter执行完毕之后，就开始慢慢收拢，这时候我们的reponse也有了。</p>
<p>​           当所有的filter执行完毕自己的后置代码之后，就回到了我们最初的地方，我们的最初的FilterHandler开始调用的地方。undertow服务器就继续开始执行了，它就会执行下面的代码输出你想要的信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if (!exchange.isDispatched() &amp;&amp; !(exchange.getConnection() instanceof ServletInitialHandler.MockServerConnection)) &#123;</div><div class="line">            servletRequestContext.getOriginalResponse().responseDone();</div><div class="line">            servletRequestContext.getOriginalRequest().clearAttributes();</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>主要就是把输出流写入到socket中，然后客户端接收</p>
<blockquote>
<p>好啦，今天就讲到这里啦，这文章还没有结束，请期待后续   ^ _ ^</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-filter原理深入浅出&quot;&gt;&lt;a href=&quot;#Spring-filter原理深入浅出&quot; class=&quot;headerlink&quot; title=&quot;Spring filter原理深入浅出&quot;&gt;&lt;/a&gt;Spring filter原理深入浅出&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在这篇文章中，我会介绍一个请求从浏览器进来，是如何被Spring拦截到的，Spring又是如何处理这个请求的，filter有什么作用，filter的原理等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、前置知识&quot;&gt;&lt;a href=&quot;#一、前置知识&quot; class=&quot;headerlink&quot; title=&quot;一、前置知识&quot;&gt;&lt;/a&gt;一、前置知识&lt;/h3&gt;&lt;p&gt;OK，我们首先介绍一下，请求从浏览器过来，我们的服务器会经历些什么。先看一张jetty的内部结构图&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://blog.vrzart.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://blog.vrzart.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot  AOP系列之AOP原理介绍</title>
    <link href="http://blog.vrzart.com/2017/10/30/Spring%20AOP%E7%B3%BB%E5%88%97%E4%B9%8BAOP%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/"/>
    <id>http://blog.vrzart.com/2017/10/30/Spring AOP系列之AOP原理介绍/</id>
    <published>2017-10-30T07:22:01.000Z</published>
    <updated>2017-12-20T05:34:43.239Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Boot-AOP系列之AOP原理介绍"><a href="#Spring-Boot-AOP系列之AOP原理介绍" class="headerlink" title="Spring Boot  AOP系列之AOP原理介绍"></a>Spring Boot  AOP系列之AOP原理介绍</h3><hr>
<blockquote>
<p>序言：在本文中，jdk动态代理和cglib代理的核心原理，我都会一一讲到，看本文的时候可以结合着上文看，了解创建的过程，创建的生命周期，才能知晓原理</p>
</blockquote>
<h4 id="一、JDK动态代理原理"><a href="#一、JDK动态代理原理" class="headerlink" title="一、JDK动态代理原理"></a>一、JDK动态代理原理</h4><h5 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h5><p>  其实大家看了上文的demo肯定会有所疑惑，为什么实现了一个<code>InvocationHandler</code>接口就可以实现切面的植入了，就可以在写好的函数方法上面，植入我们的代码呢？是不是很神奇，惊不惊喜，意不意外。OK，废话不多说，下面跟着我的思路，走一遍源代码。</p>
<h5 id="2、介绍"><a href="#2、介绍" class="headerlink" title="2、介绍"></a>2、介绍</h5><p>  上文中提到了，Spring jdk动态代理最核心的一句话莫过于下面这句话</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HelloWorld helloWorld=(HelloWorld)Proxy.</div><div class="line">                 newProxyInstance(JDKProxyTest.class.getClassLoader(),</div><div class="line">                        <span class="keyword">new</span> Class&lt;?&gt;[]&#123;HelloWorld.class&#125;,</div><div class="line">                        <span class="keyword">new</span> MyInvocationHandler(<span class="keyword">new</span> HelloworldImpl()));</div></pre></td></tr></table></figure>
<p>走进<code>newProxyInstance</code>这个方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</div><div class="line"><span class="keyword">final</span> SecurityManager sm = System.getSecurityManager();</div><div class="line"><span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</div><div class="line">  checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 从缓存中取出或者生成代理</div><div class="line">*/</div><div class="line">Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><code>getProxyClass0</code>核心方法片段如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; getProxyClass0(ClassLoader loader,</div><div class="line">                                       Class&lt;?&gt;... interfaces) &#123;</div><div class="line">  <span class="keyword">if</span> (interfaces.length &gt; <span class="number">65535</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"interface limit exceeded"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 如果已经创建了就从缓存里面拿，如果没有创建就通过ProxyClassFactory创建一个</span></div><div class="line">  <span class="keyword">return</span> proxyClassCache.get(loader, interfaces);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>proxyClassCache</code>是这样的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> WeakCache&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt;</div><div class="line">        proxyClassCache = <span class="keyword">new</span> WeakCache&lt;&gt;(<span class="keyword">new</span> KeyFactory(), <span class="keyword">new</span> ProxyClassFactory());</div></pre></td></tr></table></figure>
<p><code>ProxyClassFactory</code>是<code>Proxy</code>的一个静态内部类，实现了<code>WeakCache</code>的内部接口<code>BiFunction</code>的<code>apply</code>方法，代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">private static final class ProxyClassFactory  </div><div class="line">    implements BiFunction&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt; &#123;  </div><div class="line">    // 所有代理类名字的前缀  </div><div class="line">    private static final String proxyClassNamePrefix = "$Proxy";  </div><div class="line">  </div><div class="line">    // 用于生成代理类名字的计数器  </div><div class="line">    private static final AtomicLong nextUniqueNumber = new AtomicLong();  </div><div class="line">  </div><div class="line">    @Override  </div><div class="line">    public Class&lt;?&gt; apply(ClassLoader loader, Class&lt;?&gt;[] interfaces) &#123;  </div><div class="line">        // 省略验证代理接口的代码……  </div><div class="line">  </div><div class="line">        String proxyPkg = null;     // 生成的代理类的包名  </div><div class="line">        // 对于非公共接口，代理类的包名与接口的相同  </div><div class="line">        for (Class&lt;?&gt; intf : interfaces) &#123;  </div><div class="line">            int flags = intf.getModifiers();  </div><div class="line">            if (!Modifier.isPublic(flags)) &#123;  </div><div class="line">                String name = intf.getName();  </div><div class="line">                int n = name.lastIndexOf('.');  </div><div class="line">                String pkg = ((n == -1) ? "" : name.substring(0, n + 1));  </div><div class="line">                if (proxyPkg == null) &#123;  </div><div class="line">                    proxyPkg = pkg;  </div><div class="line">                &#125; else if (!pkg.equals(proxyPkg)) &#123;  </div><div class="line">                    throw new IllegalArgumentException(  </div><div class="line">                        "non-public interfaces from different packages");  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        // 对于公共接口的包名，默认为com.sun.proxy  </div><div class="line">        if (proxyPkg == null) &#123;  </div><div class="line">            proxyPkg = ReflectUtil.PROXY_PACKAGE + ".";  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        // 获取计数  </div><div class="line">        long num = nextUniqueNumber.getAndIncrement();  </div><div class="line">        // 默认情况下，代理类的完全限定名为：com.sun.proxy.$Proxy0，com.sun.proxy.$Proxy1……依次递增  </div><div class="line">        String proxyName = proxyPkg + proxyClassNamePrefix + num;  </div><div class="line">  </div><div class="line">        // 这里才是真正的生成代理类的字节码的地方  </div><div class="line">        byte[] proxyClassFile = ProxyGenerator.generateProxyClass(  </div><div class="line">            proxyName, interfaces);  </div><div class="line">        try &#123;  </div><div class="line">            // 根据二进制字节码返回相应的Class实例  </div><div class="line">            return defineClass0(loader, proxyName,  </div><div class="line">                                proxyClassFile, 0, proxyClassFile.length);  </div><div class="line">        &#125; catch (ClassFormatError e) &#123;  </div><div class="line">            throw new IllegalArgumentException(e.toString());  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们注意一下这行代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(</div><div class="line">               proxyName, interfaces, accessFlags);</div></pre></td></tr></table></figure>
<p>进去：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] generateProxyClass(<span class="keyword">final</span> String var0, Class&lt;?&gt;[] var1, <span class="keyword">int</span> var2) &#123;</div><div class="line">        ProxyGenerator var3 = <span class="keyword">new</span> ProxyGenerator(var0, var1, var2);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] var4 = var3.generateClassFile();</div><div class="line">   <span class="comment">//saveGeneratedFiles 这个参数是经我们配置的，默认是false，目的是是否保存在磁盘里面</span></div><div class="line">        <span class="keyword">if</span> (saveGeneratedFiles) &#123;</div><div class="line">            AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        <span class="keyword">int</span> var1 = var0.lastIndexOf(<span class="number">46</span>);</div><div class="line">                        Path var2;</div><div class="line">                        <span class="keyword">if</span> (var1 &gt; <span class="number">0</span>) &#123;</div><div class="line">                            Path var3 = Paths.get(var0.substring(<span class="number">0</span>, var1).replace(<span class="string">'.'</span>, File.separatorChar));</div><div class="line">                            Files.createDirectories(var3);</div><div class="line">                            var2 = var3.resolve(var0.substring(var1 + <span class="number">1</span>, var0.length()) + <span class="string">".class"</span>);</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            var2 = Paths.get(var0 + <span class="string">".class"</span>);</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        Files.write(var2, var4, <span class="keyword">new</span> OpenOption[<span class="number">0</span>]);</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                    &#125; <span class="keyword">catch</span> (IOException var4x) &#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">"I/O exception saving generated file: "</span> + var4x);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> var4;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> saveGeneratedFiles = ((Boolean)AccessController.doPrivileged(<span class="keyword">new</span> GetBooleanAction(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>))).booleanValue();</div></pre></td></tr></table></figure>
<p>在启动项目的时候，虚拟机设置一下这个参数<code>sun.misc.ProxyGenerator.saveGeneratedFiles</code>为true，就可以打印出代理对象的字节码文件。</p>
<p>PS:其实我们还有很多方法获取字节码文件，后文中介绍</p>
<p>OK，我们看下我们生成的字节码文件长什么样子：</p>
<p><img src="http://ojkdckcc1.bkt.clouddn.com//blog/weixin_43242342342342.jpg" alt="jdk代理class文件"></p>
<p>我们可以清楚的看到生成的代理文件，实现了我们的自己需要的代理的接口<code>QueryUserInfoBiz</code> ，实现了<code>SpringProxy</code>接口 ，继承了<code>Proxy</code>类等。再来看看我们普通的一个方法，是如何被代理的。</p>
<p><code>insertUserInfoV5</code>这个方法被代理之后，被植入了一段代码，<code>super.h.invoke</code>方法 , super表示Proxy这个夫类，h表示Proxy里面的一个属性，是<code>InvocationHandler</code>类型的，回忆一下，我们在手动创建jdk动态代理的时候，是不是需要指定一个<code>InvocationHandler</code>，这里就是起这个作用的，比如说在上个例子中，是我们自己写的<code>MyInvocationHandler</code>类，但是在Spring中，我们没有指定这个<code>handler</code>，那到底调用的是谁呢？</p>
<p>接上回：</p>
<p>在我们最开始用缓存创建那一段的时候，后面还有这样一段代码。这段代码的作用是让handler作为参数调用构造方法来获得代理类的实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</div><div class="line">                checkNewProxyPermission(Reflection.getCallerClass(), cl);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</div><div class="line">            <span class="keyword">final</span> InvocationHandler ih = h;</div><div class="line">            <span class="keyword">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</div><div class="line">                AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</div><div class="line">                    <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        cons.setAccessible(<span class="keyword">true</span>);</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> cons.newInstance(<span class="keyword">new</span> Object[]&#123;h&#125;);</div></pre></td></tr></table></figure>
<p>实际上，调用者是，一般而言，谁去准备创建proxy，谁一般就是这个handler，比如我们这里讲的aop里面，创建者就是<code>JdkDynamicAopProxy</code>这个类，这个类他实现了<code>InvocationHandler</code>接口，所以他被作为参数传进去了，自然而言，当代理类里面的方法被调用的时候，他的invoke方法就会被唤醒。</p>
<h4 id="二、CGLib原理介绍"><a href="#二、CGLib原理介绍" class="headerlink" title="二、CGLib原理介绍"></a>二、CGLib原理介绍</h4><p>我们再来看看Cglib代理  </p>
<p>先来看看Cglib手动创建的一个简单代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Enhancer enhancer = <span class="keyword">new</span> Enhancer();</div><div class="line">enhancer.setSuperclass(RealSubject.class);<span class="comment">//继承被代理的那个类</span></div><div class="line">enhancer.setCallback(<span class="keyword">new</span> DynamicSubjectHandler())<span class="comment">//设置回调类</span></div><div class="line">RealSubject realSubject = (RealSubject)enhancer.create();<span class="comment">//创建代理对象</span></div></pre></td></tr></table></figure>
<p>核心方法自然是<code>create</code>方法，走进去看一下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.classOnly = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">this</span>.argumentTypes = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.createHelper();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>createHelper</code>方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">createHelper</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.validate();</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.superclass != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.setNamePrefix(<span class="keyword">this</span>.superclass.getName());</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.interfaces != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.setNamePrefix(<span class="keyword">this</span>.interfaces[ReflectUtils.findPackageProtected(<span class="keyword">this</span>.interfaces)].getName());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.create(KEY_FACTORY.newInstance(<span class="keyword">this</span>.superclass != <span class="keyword">null</span> ? <span class="keyword">this</span>.superclass.getName() : <span class="keyword">null</span>, ReflectUtils.getNames(<span class="keyword">this</span>.interfaces), <span class="keyword">this</span>.filter, <span class="keyword">this</span>.callbackTypes, <span class="keyword">this</span>.useFactory, <span class="keyword">this</span>.interceptDuringConstruction, <span class="keyword">this</span>.serialVersionUID));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>调用了<code>super.create</code>方法，核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//如果还没有生成，就走生成逻辑</span></div><div class="line"><span class="keyword">if</span> (gen == <span class="keyword">null</span>) &#123;</div><div class="line">  <span class="keyword">byte</span>[] b = <span class="keyword">this</span>.strategy.generate(<span class="keyword">this</span>);</div><div class="line">  String className = ClassNameReader.getClassName(<span class="keyword">new</span> ClassReader(b));</div><div class="line">  <span class="keyword">this</span>.getClassNameCache(loader).add(className);</div><div class="line">  gen = ReflectUtils.defineClass(className, b, loader);</div><div class="line">&#125;</div><div class="line"><span class="comment">//生成的代理类放在缓存里面</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.useCache) &#123;</div><div class="line">  ((Map)cache2).put(key, <span class="keyword">new</span> WeakReference(gen));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后看<code>generate方法</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] generate(ClassGenerator cg) <span class="keyword">throws</span> Exception &#123;</div><div class="line">  DebuggingClassWriter cw = <span class="keyword">this</span>.getClassVisitor();</div><div class="line">  <span class="keyword">this</span>.transform(cg).generateClass(cw);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.transform(cw.toByteArray());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再看<code>generateClass</code>方法，这个就是生成代理文件的最核心逻辑了，先看<code>Enhancer</code>里面的<code>generateClass</code> 方法，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">ClassEmitter e = <span class="keyword">new</span> ClassEmitter(v);</div><div class="line">            e.begin_class(<span class="number">46</span>, <span class="number">1</span>, <span class="keyword">this</span>.getClassName(), Type.getType(sc), <span class="keyword">this</span>.useFactory ? TypeUtils.add(TypeUtils.getTypes(<span class="keyword">this</span>.interfaces), FACTORY) : TypeUtils.getTypes(<span class="keyword">this</span>.interfaces), <span class="string">"&lt;generated&gt;"</span>);</div><div class="line">            List constructorInfo = CollectionUtils.transform(constructors, MethodInfoTransformer.getInstance());</div><div class="line">            e.declare_field(<span class="number">2</span>, <span class="string">"CGLIB$BOUND"</span>, Type.BOOLEAN_TYPE, (Object)<span class="keyword">null</span>);</div><div class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.interceptDuringConstruction) &#123;</div><div class="line">                e.declare_field(<span class="number">2</span>, <span class="string">"CGLIB$CONSTRUCTED"</span>, Type.BOOLEAN_TYPE, (Object)<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            e.declare_field(<span class="number">26</span>, <span class="string">"CGLIB$THREAD_CALLBACKS"</span>, THREAD_LOCAL, (Object)<span class="keyword">null</span>);</div><div class="line">            e.declare_field(<span class="number">26</span>, <span class="string">"CGLIB$STATIC_CALLBACKS"</span>, CALLBACK_ARRAY, (Object)<span class="keyword">null</span>);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.serialVersionUID != <span class="keyword">null</span>) &#123;</div><div class="line">                e.declare_field(<span class="number">26</span>, <span class="string">"serialVersionUID"</span>, Type.LONG_TYPE, <span class="keyword">this</span>.serialVersionUID);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.callbackTypes.length; ++i) &#123;</div><div class="line">                e.declare_field(<span class="number">2</span>, getCallbackField(i), <span class="keyword">this</span>.callbackTypes[i], (Object)<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.emitMethods(e, methods, actualMethods);</div><div class="line">            <span class="keyword">this</span>.emitConstructors(e, constructorInfo);</div><div class="line">            <span class="keyword">this</span>.emitSetThreadCallbacks(e);</div><div class="line">            <span class="keyword">this</span>.emitSetStaticCallbacks(e);</div><div class="line">            <span class="keyword">this</span>.emitBindCallbacks(e);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.useFactory) &#123;</div><div class="line">                <span class="keyword">int</span>[] keys = <span class="keyword">this</span>.getCallbackKeys();</div><div class="line">                <span class="keyword">this</span>.emitNewInstanceCallbacks(e);</div><div class="line">                <span class="keyword">this</span>.emitNewInstanceCallback(e);</div><div class="line">                <span class="keyword">this</span>.emitNewInstanceMultiarg(e, constructorInfo);</div><div class="line">                <span class="keyword">this</span>.emitGetCallback(e, keys);</div><div class="line">                <span class="keyword">this</span>.emitSetCallback(e, keys);</div><div class="line">                <span class="keyword">this</span>.emitGetCallbacks(e);</div><div class="line">                <span class="keyword">this</span>.emitSetCallbacks(e);</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<p>这段就是生成字节码的核心逻辑，这段里面有很复杂的调用逻辑，我们这里不作详细介绍。</p>
<p>我们也有办法拿到CGLIB生成的代理文件，我这里不赘述，后面开一篇博客讲，这里面也挺麻烦的，当初我也找了很久。</p>
<p>OK，我们来看一下某一份生成好的代理字节码文件</p>
<p><img src="http://ojkdckcc1.bkt.clouddn.com//blog/微信图片_20171030165300.png" alt="CGlib生成的字节码文件"></p>
<p>这个代理类继承了我们被代理的类或者接口，然后实现了<code>SpringProxy</code>、<code>Advised</code>接口等, 首先当我们调用<code>addOneCityV8</code>方法的时候，代理类会先去看<code>CGLIB$CALLBACK_0</code> 这个属性为不为空，这个是一个<code>MethodIntercepter</code>类型的 ，如果为空就调用一个绑定方法，<code>CGLIB$BIND_CALLBACKS</code> ，它负责从一个叫做<code>CGLIB$THREAD_CALLBACKS</code> 的ThreadLocal对象中拿或者叫做<code>CGLIB$STATIC_CALLBACKS</code>的<code>Callback</code>数组中拿。拿到了之后就执行<code>intercept</code>方法。</p>
<p>那么这里有个问题，回调类到底是如何选择的呢？</p>
<p>这里的处理逻辑和JDK动态代理类似，回调类基于一种，谁创建，谁负责的逻辑，已AOP创建动态代理为例，<code>CglibAopProxy</code>这个类在创建代理的时候，会调用一个 <code>getCallbacks</code>方法，在<code>CglibAopProxy</code> 中可以搜索到，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span> exposeProxy = <span class="keyword">this</span>.advised.isExposeProxy();</div><div class="line">		<span class="keyword">boolean</span> isFrozen = <span class="keyword">this</span>.advised.isFrozen();</div><div class="line">		<span class="keyword">boolean</span> isStatic = <span class="keyword">this</span>.advised.getTargetSource().isStatic();</div><div class="line"></div><div class="line">		<span class="comment">// Choose an "aop" interceptor (used for AOP calls).</span></div><div class="line">		Callback aopInterceptor = <span class="keyword">new</span> DynamicAdvisedInterceptor(<span class="keyword">this</span>.advised);</div><div class="line"></div><div class="line">		<span class="comment">// Choose a "straight to target" interceptor. (used for calls that are</span></div><div class="line">		<span class="comment">// unadvised but can return this). May be required to expose the proxy.</span></div><div class="line">		Callback targetInterceptor;</div><div class="line">		<span class="keyword">if</span> (exposeProxy) &#123;</div><div class="line">			targetInterceptor = isStatic ?</div><div class="line">					<span class="keyword">new</span> StaticUnadvisedExposedInterceptor(<span class="keyword">this</span>.advised.getTargetSource().getTarget()) :</div><div class="line">					<span class="keyword">new</span> DynamicUnadvisedExposedInterceptor(<span class="keyword">this</span>.advised.getTargetSource());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			targetInterceptor = isStatic ?</div><div class="line">					<span class="keyword">new</span> StaticUnadvisedInterceptor(<span class="keyword">this</span>.advised.getTargetSource().getTarget()) :</div><div class="line">					<span class="keyword">new</span> DynamicUnadvisedInterceptor(<span class="keyword">this</span>.advised.getTargetSource());</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Choose a "direct to target" dispatcher (used for</span></div><div class="line">		<span class="comment">// unadvised calls to static targets that cannot return this).</span></div><div class="line">		Callback targetDispatcher = isStatic ?</div><div class="line">				<span class="keyword">new</span> StaticDispatcher(<span class="keyword">this</span>.advised.getTargetSource().getTarget()) : <span class="keyword">new</span> SerializableNoOp();</div><div class="line"></div><div class="line">		Callback[] mainCallbacks = <span class="keyword">new</span> Callback[] &#123;</div><div class="line">				aopInterceptor,  <span class="comment">// for normal advice</span></div><div class="line">				targetInterceptor,  <span class="comment">// invoke target without considering advice, if optimized</span></div><div class="line">				<span class="keyword">new</span> SerializableNoOp(),  <span class="comment">// no override for methods mapped to this</span></div><div class="line">				targetDispatcher, <span class="keyword">this</span>.advisedDispatcher,</div><div class="line">				<span class="keyword">new</span> EqualsInterceptor(<span class="keyword">this</span>.advised),</div><div class="line">				<span class="keyword">new</span> HashCodeInterceptor(<span class="keyword">this</span>.advised)</div><div class="line">		&#125;;</div></pre></td></tr></table></figure>
<p>根据摘取的部分片段可以得知，他是跟配置相关的，如果你没有作任何配置，那么系统一般首选<code>DynamicAdvisedInterceptor</code> 这个拦截器。也就是回调类就是<code>DynamicAdvisedInterceptor</code> ，会调用他里面的<code>intercept</code>方法。</p>
<p>完毕。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-Boot-AOP系列之AOP原理介绍&quot;&gt;&lt;a href=&quot;#Spring-Boot-AOP系列之AOP原理介绍&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot  AOP系列之AOP原理介绍&quot;&gt;&lt;/a&gt;Spring Boot  AOP系列之AOP原理介绍&lt;/h3&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;序言：在本文中，jdk动态代理和cglib代理的核心原理，我都会一一讲到，看本文的时候可以结合着上文看，了解创建的过程，创建的生命周期，才能知晓原理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;一、JDK动态代理原理&quot;&gt;&lt;a href=&quot;#一、JDK动态代理原理&quot; class=&quot;headerlink&quot; title=&quot;一、JDK动态代理原理&quot;&gt;&lt;/a&gt;一、JDK动态代理原理&lt;/h4&gt;&lt;h5 id=&quot;1、前言&quot;&gt;&lt;a href=&quot;#1、前言&quot; class=&quot;headerlink&quot; title=&quot;1、前言&quot;&gt;&lt;/a&gt;1、前言&lt;/h5&gt;&lt;p&gt;  其实大家看了上文的demo肯定会有所疑惑，为什么实现了一个&lt;code&gt;InvocationHandler&lt;/code&gt;接口就可以实现切面的植入了，就可以在写好的函数方法上面，植入我们的代码呢？是不是很神奇，惊不惊喜，意不意外。OK，废话不多说，下面跟着我的思路，走一遍源代码。&lt;/p&gt;
&lt;h5 id=&quot;2、介绍&quot;&gt;&lt;a href=&quot;#2、介绍&quot; class=&quot;headerlink&quot; title=&quot;2、介绍&quot;&gt;&lt;/a&gt;2、介绍&lt;/h5&gt;&lt;p&gt;  上文中提到了，Spring jdk动态代理最核心的一句话莫过于下面这句话&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;HelloWorld helloWorld=(HelloWorld)Proxy.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 newProxyInstance(JDKProxyTest.class.getClassLoader(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Class&amp;lt;?&amp;gt;[]&amp;#123;HelloWorld.class&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MyInvocationHandler(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HelloworldImpl()));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;走进&lt;code&gt;newProxyInstance&lt;/code&gt;这个方法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Class&amp;lt;?&amp;gt;[] intfs = interfaces.clone();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; SecurityManager sm = System.getSecurityManager();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sm != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  checkProxyAccess(Reflection.getCallerClass(), loader, intfs);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 从缓存中取出或者生成代理&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Class&amp;lt;?&amp;gt; cl = getProxyClass0(loader, intfs);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://blog.vrzart.com/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.vrzart.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot  AOP系列之动态代理创建</title>
    <link href="http://blog.vrzart.com/2017/10/30/Spring%20AOP%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BB%A3%E7%90%86%E5%88%9B%E5%BB%BA/"/>
    <id>http://blog.vrzart.com/2017/10/30/Spring AOP系列之代理创建/</id>
    <published>2017-10-30T04:22:01.000Z</published>
    <updated>2017-12-20T05:34:54.039Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Boot-AOP系列之动态代理创建"><a href="#Spring-Boot-AOP系列之动态代理创建" class="headerlink" title="Spring Boot  AOP系列之动态代理创建"></a>Spring Boot  AOP系列之动态代理创建</h3><hr>
<blockquote>
<p>序言：在本文中，我会讲到Spring中如何创建动态代理，如何利用jdk或者cglib来创建动态代理，但是同时，我也会提及如何手动创建代理，这将有助于我们了解动态代理的原理。我们先来讲讲如何手动创建吧。</p>
</blockquote>
<h4 id="一、-手动创建之jdk动态代理"><a href="#一、-手动创建之jdk动态代理" class="headerlink" title="一、 手动创建之jdk动态代理"></a>一、 手动创建之jdk动态代理</h4><h5 id="1、-jdk动态代理是基于接口的，所以必须要写一个接口，以及实现类，然后还需要写一个类来实现InvocationHandler类，"><a href="#1、-jdk动态代理是基于接口的，所以必须要写一个接口，以及实现类，然后还需要写一个类来实现InvocationHandler类，" class="headerlink" title="1、 jdk动态代理是基于接口的，所以必须要写一个接口，以及实现类，然后还需要写一个类来实现InvocationHandler类，"></a>1、 jdk动态代理是基于接口的，所以必须要写一个接口，以及实现类，然后还需要写一个类来实现InvocationHandler类，</h5><p>接口如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Helloworld</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现类如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloworldImpl</span> <span class="keyword">implements</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.print(<span class="string">"hello world"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>拦截类如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> Object target;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler</span><span class="params">(Object target)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.target=target;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        System.out.println(<span class="string">"method :"</span>+ method.getName()+<span class="string">" is invoked!"</span>);</div><div class="line">        <span class="keyword">return</span> method.invoke(target,args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKProxyTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</div><div class="line">       <span class="comment">//重要的是这里的newProxyInstance方法，后面博文讲原理的时候会讲到为什么会植入切面的</span></div><div class="line">        HelloWorld helloWorld=(HelloWorld)Proxy.</div><div class="line">                 newProxyInstance(JDKProxyTest.class.getClassLoader(),</div><div class="line">                        <span class="keyword">new</span> Class&lt;?&gt;[]&#123;HelloWorld.class&#125;,</div><div class="line">                        <span class="keyword">new</span> MyInvocationHandler(<span class="keyword">new</span> HelloworldImpl()));</div><div class="line">        helloWorld.sayHello();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2、这里先教大家怎么做，以后教大家原理，现在依葫芦画瓢就行"><a href="#2、这里先教大家怎么做，以后教大家原理，现在依葫芦画瓢就行" class="headerlink" title="2、这里先教大家怎么做，以后教大家原理，现在依葫芦画瓢就行"></a>2、这里先教大家怎么做，以后教大家原理，现在依葫芦画瓢就行</h5><h4 id="二、手动创建之CGLIB代理"><a href="#二、手动创建之CGLIB代理" class="headerlink" title="二、手动创建之CGLIB代理"></a>二、手动创建之CGLIB代理</h4><h5 id="1、cglib代理和jdk代理目的差不多，但是cglib代理不仅可以代理接口，还可以代理类，比jdk代理作用-范围更加广泛一些，cglib代理借助了ASM这个非常强大的Java字节码生成框架"><a href="#1、cglib代理和jdk代理目的差不多，但是cglib代理不仅可以代理接口，还可以代理类，比jdk代理作用-范围更加广泛一些，cglib代理借助了ASM这个非常强大的Java字节码生成框架" class="headerlink" title="1、cglib代理和jdk代理目的差不多，但是cglib代理不仅可以代理接口，还可以代理类，比jdk代理作用 范围更加广泛一些，cglib代理借助了ASM这个非常强大的Java字节码生成框架"></a>1、cglib代理和jdk代理目的差不多，但是cglib代理不仅可以代理接口，还可以代理类，比jdk代理作用 范围更加广泛一些，cglib代理借助了ASM这个非常强大的Java字节码生成框架</h5><h5 id="2、demo如下"><a href="#2、demo如下" class="headerlink" title="2、demo如下"></a>2、demo如下</h5><p>  接口： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;    </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  实现：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;    </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;    </div><div class="line">       System.out.println(<span class="string">"From real subject."</span>);    </div><div class="line">   &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>处理类，也叫回调方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实现了InvocationHandler,很重要</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicSubjectHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span>    </span></div><div class="line">&#123;    </div><div class="line">    <span class="keyword">private</span> Object obj;<span class="comment">//这是动态代理的好处，被封装的对象是Object类型，接受任意类型的对象    </span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicSubject</span><span class="params">()</span>    </span></div><div class="line">    &#123;    </div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicSubject</span><span class="params">(Object obj)</span>    </span></div><div class="line">    &#123;    </div><div class="line">        <span class="keyword">this</span>.obj = obj;    </div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    <span class="comment">//这个方法不是我们显示的去调用    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable    </span></div><div class="line">    &#123;    </div><div class="line">        System.out.println(<span class="string">"before calling "</span> + method);    </div><div class="line">    </div><div class="line">        method.invoke(obj, args);    </div><div class="line">    </div><div class="line">        System.out.println(<span class="string">"after calling "</span> + method);    </div><div class="line">    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Test方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</div><div class="line">        enhancer.setSuperclass(RealSubject.class);<span class="comment">//继承被代理的那个类</span></div><div class="line">        enhancer.setCallback(<span class="keyword">new</span> DynamicSubjectHandler())<span class="comment">//设置回调类</span></div><div class="line">        RealSubject realSubject = (RealSubject)enhancer.create();<span class="comment">//创建代理对象</span></div><div class="line">        realSubject.request();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//PS: 这段代码是我手敲的,大家粘贴的时候注意一下哈</span></div></pre></td></tr></table></figure>
<p>#####2、执行main方法之后，DynamicSubjectHandler 中的invoke方法会被显式调用，打印出信息，原理后面我会介绍，详情关注下篇博文。</p>
<h4 id="三、Spring-boot创建之JDK动态代理"><a href="#三、Spring-boot创建之JDK动态代理" class="headerlink" title="三、Spring boot创建之JDK动态代理"></a>三、Spring boot创建之JDK动态代理</h4><p>  事实上，spring对于代理的类的创建选用何种方法是有规律可寻的，详细可看一下源代码，如下：</p>
<p><img src="http://ojkdckcc1.bkt.clouddn.com/微信图片_20171030144249.png" alt="spring如何选择代理类型"></p>
<p>spring在创建代理的时候，会调用DefaultAopProxyFactory里面的createAopProxy方法，这个方法会取判断是使用jdk动态代理还是cglib代理。第一个参数，config.isOptimize()，这个方法是一个配置的，用于判断创建代理是否乐观（是否会经常改动），默认配置为false，第二个参数是不是目标代理类。第三个参数，<code>hasNoUserSuppliedProxyInterfaces()</code>这个方法，判断代理类的AdviseSupport处理类是不是只会指定SpringProxy这个接口，一般会返回true。当这些条件都不满足的时候，spring 默认走jdk动态代理。当满足这些条件中某一个的时候，去判断是不是接口或者已经是代理类，如果是接口或者已经是代理类的时候，就去走jdk动态代理，否者走cglib代理  </p>
<p>OK，讲清楚了spring选择动态代理的原因之后，我们来看看怎么指定jdk动态代理。</p>
<p>Spring boot配置jdk动态代理很简单，只需要在Spring boot配置文件中配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring.aop.proxy-target-class=false</div></pre></td></tr></table></figure>
<p>然后自己写代理类的时候注意是接口就完毕啦。</p>
<h4 id="四、Spring-boot创建之Cglib代理"><a href="#四、Spring-boot创建之Cglib代理" class="headerlink" title="四、Spring boot创建之Cglib代理"></a>四、Spring boot创建之Cglib代理</h4><p>同理，spring boot创建Cglib代理也很简单，直接配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring.aop.proxy-target-class=true</div></pre></td></tr></table></figure>
<p>就可以强制使用cglib代理</p>
<p>下篇博文介绍原理哈</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-Boot-AOP系列之动态代理创建&quot;&gt;&lt;a href=&quot;#Spring-Boot-AOP系列之动态代理创建&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot  AOP系列之动态代理创建&quot;&gt;&lt;/a&gt;Spring Boot  AOP系列之动态代理创建&lt;/h3&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;序言：在本文中，我会讲到Spring中如何创建动态代理，如何利用jdk或者cglib来创建动态代理，但是同时，我也会提及如何手动创建代理，这将有助于我们了解动态代理的原理。我们先来讲讲如何手动创建吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;一、-手动创建之jdk动态代理&quot;&gt;&lt;a href=&quot;#一、-手动创建之jdk动态代理&quot; class=&quot;headerlink&quot; title=&quot;一、 手动创建之jdk动态代理&quot;&gt;&lt;/a&gt;一、 手动创建之jdk动态代理&lt;/h4&gt;&lt;h5 id=&quot;1、-jdk动态代理是基于接口的，所以必须要写一个接口，以及实现类，然后还需要写一个类来实现InvocationHandler类，&quot;&gt;&lt;a href=&quot;#1、-jdk动态代理是基于接口的，所以必须要写一个接口，以及实现类，然后还需要写一个类来实现InvocationHandler类，&quot; class=&quot;headerlink&quot; title=&quot;1、 jdk动态代理是基于接口的，所以必须要写一个接口，以及实现类，然后还需要写一个类来实现InvocationHandler类，&quot;&gt;&lt;/a&gt;1、 jdk动态代理是基于接口的，所以必须要写一个接口，以及实现类，然后还需要写一个类来实现InvocationHandler类，&lt;/h5&gt;&lt;p&gt;接口如下&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Helloworld&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现类如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloworldImpl&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloWorld&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.print(&lt;span class=&quot;string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://blog.vrzart.com/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.vrzart.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Fastjson解析多级泛型</title>
    <link href="http://blog.vrzart.com/2017/08/16/Fastjson%E8%A7%A3%E6%9E%90%E5%A4%9A%E7%BA%A7%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E2%80%94%E6%96%B0%E5%A2%9E%E4%BD%BF%E7%94%A8class%E6%96%87%E4%BB%B6%E6%9D%A5%E8%A7%A3%E6%9E%90%E5%A4%9A%E7%BA%A7%E6%B3%9B%E5%9E%8B/"/>
    <id>http://blog.vrzart.com/2017/08/16/Fastjson解析多级泛型的几种方式—新增使用class文件来解析多级泛型/</id>
    <published>2017-08-16T07:22:01.000Z</published>
    <updated>2017-12-21T06:22:59.601Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Fastjson解析多级泛型"><a href="#Fastjson解析多级泛型" class="headerlink" title="Fastjson解析多级泛型"></a>Fastjson解析多级泛型</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>现在网上大多数是使用<code>TypeReference</code> 方式来解析JSON数据，这里我提供另外一种方式来解析，使用类文件进行解析，两种方式我都会给出实际代码</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="TypeReference方式"><a href="#TypeReference方式" class="headerlink" title="TypeReference方式"></a>TypeReference方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span></div><div class="line">   <span class="meta">@Path</span>(<span class="string">"getUserCourse"</span>)</div><div class="line">   <span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</div><div class="line">   <span class="keyword">public</span> Result&lt;List&lt;UserCourseDto&gt;&gt; getUserCourse()&#123;</div><div class="line">       <span class="keyword">return</span> externalBiz.getUserCourse();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Result&lt;List&lt;UserCourseDto&gt;&gt; getUserCourse()&#123;</div><div class="line">        String result = restTemplate.getForObject(MOCK_JSON_URL, String.class);</div><div class="line">        <span class="keyword">return</span> JSONObject.parseObject(result, <span class="keyword">new</span> TypeReference&lt;Result&lt;List&lt;UserCourseDto&gt;&gt;&gt;() &#123;&#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>浏览器访问：</strong><code>http://localhost:8080/v1/province/getUserCourse</code></p>
<p>可以得到json返回的结果</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  status: 0,</div><div class="line">  message: "1",</div><div class="line">  data: [</div><div class="line">    &#123;</div><div class="line">      openType: "兑换 ",</div><div class="line">      userID: 30014,</div><div class="line">      classID: 10376,</div><div class="line">      className: "趣味职场俚语课程【11月班】",</div><div class="line">      chargeFee: 106,</div><div class="line">      classStudyTime: null,</div><div class="line">      openRMB: 0,</div><div class="line">      rechargeFee: 0,</div><div class="line">      awardFee: 0,</div><div class="line">      openFee: 0,</div><div class="line">      dateAdded: 1312175789393,</div><div class="line">      expiredDate: 1323964800000</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>介绍：</strong></p>
<p>这里使用了提供的TypeReference进行包装，能够清晰明了进行解析多级泛型，但是有时候，我们做一些通用的解析框架的时候，可能会用T类型，T类型拿到的是字节码文件，或者class对象，又该怎么处理呢？请看下面介绍。</p>
<h4 id="class类方式"><a href="#class类方式" class="headerlink" title="class类方式"></a>class类方式</h4><p><strong>接口：</strong></p>
<p>接口之类用了一个注解来处理的，没有直接传class对象过去，因为在实际项目中，基本都是注解，没有谁会直接传class对象。所以我传的Annotation数组过去啦</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span></div><div class="line">   <span class="meta">@Reader</span>(extParamClass = &#123;Result.class,List.class,UserCourseDto.class&#125;)</div><div class="line">   <span class="meta">@Path</span>(<span class="string">"getUserCourseV2"</span>)</div><div class="line">   <span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</div><div class="line">   <span class="keyword">public</span> Result&lt;List&lt;UserCourseDto&gt;&gt; getUserCourseV2()&#123;</div><div class="line">       Annotation[] annotations = <span class="keyword">new</span> Annotation[<span class="number">0</span>];</div><div class="line">       <span class="keyword">for</span> (Method method : <span class="keyword">this</span>.getClass().getMethods()) &#123;</div><div class="line">           <span class="keyword">if</span> (method.getName().equals(<span class="string">"getUserCourseV2"</span>))&#123;</div><div class="line">               annotations = method.getAnnotations();</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> externalBiz.getUserCourseV2(annotations);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><strong>处理：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Result&lt;List&lt;UserCourseDto&gt;&gt; getUserCourseV2(Annotation[] annotations) &#123;</div><div class="line">        <span class="keyword">final</span> Reader[] readers = &#123;<span class="keyword">null</span>&#125;;</div><div class="line">        <span class="keyword">if</span>(annotations != <span class="keyword">null</span>) &#123;</div><div class="line">            Arrays</div><div class="line">                    .stream(annotations)</div><div class="line">                    .filter(annotation -&gt; annotation.annotationType().equals(Reader.class))</div><div class="line">                    .findFirst().ifPresent(x -&gt; readers[<span class="number">0</span>] = (Reader) x);</div><div class="line">        &#125;</div><div class="line">        Class[] classes = readers[<span class="number">0</span>].extParamClass();</div><div class="line">        String result = restTemplate.getForObject(MOCK_JSON_URL, String.class);</div><div class="line">        <span class="comment">//这里不用TypeReference方式，直接用class对象来处理</span></div><div class="line"></div><div class="line">        ParameterizedTypeImpl beforeType = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (classes.length!=<span class="number">0</span>)&#123;</div><div class="line">            <span class="comment">//支持多级泛型的解析</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = classes.length-<span class="number">1</span>; i &gt;<span class="number">0</span> ; i--) &#123;</div><div class="line">                beforeType = <span class="keyword">new</span> ParameterizedTypeImpl(<span class="keyword">new</span> Type[]&#123;beforeType == <span class="keyword">null</span>? classes[i]:beforeType&#125;, <span class="keyword">null</span>, classes[i - <span class="number">1</span>]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>  JSON.parseObject(result,beforeType);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>代码评析：</strong></p>
<p>主要起作用的还是这两行代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = classes.length-<span class="number">1</span>; i &gt;<span class="number">0</span> ; i--) &#123;</div><div class="line">                beforeType = <span class="keyword">new</span> ParameterizedTypeImpl(<span class="keyword">new</span> Type[]&#123;beforeType == <span class="keyword">null</span>? classes[i]:beforeType&#125;, <span class="keyword">null</span>, classes[i - <span class="number">1</span>]);</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<p>主要意思是将你的class对象包装成一个ParameterizedTypeImpl，使用ParameterizedTypeImpl来解析多级泛型，但是要注意的是，每层泛型，都需要用一个ParameterizedTypeImpl对象进行包装起来才会起作用，因为他会有一个<code>actualTypeArguments</code> 和一个 <code>rawType</code> ，在多级泛型中，用我这里的例子说明，第一层的时候<code>rawType</code>  会是一个<code>Result</code>对象，而<code>actualTypeArguments</code> 会是一个包装过后的<code>ParameterizedTypeImpl</code>对象，第二层的时候，<code>rawType</code>  会是一个List对象，而<code>actualTypeArguments</code> 会是包装上一层的对象。后同。PS : 如果这里不知道我说的是什么，请调试的时候结合来看哈</p>
<p>最后也可以正确解析哈~</p>
<blockquote>
<p>END</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Fastjson解析多级泛型&quot;&gt;&lt;a href=&quot;#Fastjson解析多级泛型&quot; class=&quot;headerlink&quot; title=&quot;Fastjson解析多级泛型&quot;&gt;&lt;/a&gt;Fastjson解析多级泛型&lt;/h3&gt;&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;现在网上大多数是使用&lt;code&gt;TypeReference&lt;/code&gt; 方式来解析JSON数据，这里我提供另外一种方式来解析，使用类文件进行解析，两种方式我都会给出实际代码&lt;/p&gt;
&lt;h4 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h4&gt;&lt;h5 id=&quot;TypeReference方式&quot;&gt;&lt;a href=&quot;#TypeReference方式&quot; class=&quot;headerlink&quot; title=&quot;TypeReference方式&quot;&gt;&lt;/a&gt;TypeReference方式&lt;/h5&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@GET&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;meta&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;getUserCourse&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;meta&quot;&gt;@Produces&lt;/span&gt;(MediaType.APPLICATION_JSON)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Result&amp;lt;List&amp;lt;UserCourseDto&amp;gt;&amp;gt; getUserCourse()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; externalBiz.getUserCourse();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Result&amp;lt;List&amp;lt;UserCourseDto&amp;gt;&amp;gt; getUserCourse()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String result = restTemplate.getForObject(MOCK_JSON_URL, String.class);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; JSONObject.parseObject(result, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TypeReference&amp;lt;Result&amp;lt;List&amp;lt;UserCourseDto&amp;gt;&amp;gt;&amp;gt;() &amp;#123;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://blog.vrzart.com/categories/JAVA/"/>
    
    
      <category term="java" scheme="http://blog.vrzart.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 集成 resteasy篇 — jax-rs初步介绍和spring boot集成</title>
    <link href="http://blog.vrzart.com/2017/07/20/Spring%20Boot%20%E9%9B%86%E6%88%90%20resteasy%E7%AF%87%20%E2%80%94%20jax-rs%E5%88%9D%E6%AD%A5%E4%BB%8B%E7%BB%8D%E5%92%8Cspring%20boot%E9%9B%86%E6%88%90/"/>
    <id>http://blog.vrzart.com/2017/07/20/Spring Boot 集成 resteasy篇 — jax-rs初步介绍和spring boot集成/</id>
    <published>2017-07-20T07:22:01.000Z</published>
    <updated>2017-12-20T06:03:29.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Boot-集成-resteasy篇-—-jax-rs初步介绍和spring-boot集成"><a href="#Spring-Boot-集成-resteasy篇-—-jax-rs初步介绍和spring-boot集成" class="headerlink" title="Spring Boot 集成 resteasy篇 — jax-rs初步介绍和spring boot集成"></a>Spring Boot 集成 resteasy篇 — jax-rs初步介绍和spring boot集成</h2><p><strong>JAX-RS</strong> 是代表restful web service的一套规范API，JAX-RS规范基于JAVA编程语言，它是用来创建Restful 风格的web services服务的。Jax-rs使用一系列注解来简化java开发。  </p>
<p>JAX-RS也称jsr339  (全称java specifications requests java规范提案第339个)，由jcp(java community process)组织经过投票通过。  </p>
<p>为了加深对jsr的理解，举一个简单的例子，jsr 330标准就是依赖注入的提案，已经通过。</p>
<h2 id="规范说明"><a href="#规范说明" class="headerlink" title="规范说明"></a>规范说明</h2><p>规范定义了一些常见的注解（见下表），用来标注一种资源文件为restfun风格的资源文件</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>注解</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><strong>@Path</strong></td>
<td>类或者方法的相对地址，标注在类或者方法上</td>
</tr>
<tr>
<td>2</td>
<td><strong>@GET</strong></td>
<td>HTTP GET请求用，用来获取资源</td>
</tr>
<tr>
<td>3</td>
<td><strong>@PUT</strong></td>
<td>HTTP PUT 请求，用来创建资源</td>
</tr>
<tr>
<td>4</td>
<td><strong>@POST</strong></td>
<td>HTTP POST 请求, 用来创建或者更新资源</td>
</tr>
<tr>
<td>5</td>
<td><strong>@DELETE</strong></td>
<td>HTTP DELETE请求, 用来删除资源</td>
</tr>
<tr>
<td>6</td>
<td><strong>@HEAD</strong></td>
<td>HTTP HEAD请求, 用来获取一个接口是否可用的状态</td>
</tr>
<tr>
<td>7</td>
<td><strong>@Produces</strong></td>
<td>返回数据的格式比如APPLICATION/XML, TEXT/HTML, APPLICATION/JSON</td>
</tr>
<tr>
<td>8</td>
<td><strong>@Consumes</strong></td>
<td>请求数据格式 , 如json</td>
</tr>
<tr>
<td>9</td>
<td><strong>@PathParam</strong></td>
<td>绑定url里面的参数</td>
</tr>
<tr>
<td>10</td>
<td><strong>@QueryParam</strong></td>
<td>绑定url后面的参数（？后面的）</td>
</tr>
<tr>
<td>11</td>
<td><strong>@MatrixParam</strong></td>
<td>绑定包含多个   property (属性)=value(值)   方法参数表达式</td>
</tr>
<tr>
<td>12</td>
<td><strong>@HeaderParam</strong></td>
<td>给header里面传参</td>
</tr>
<tr>
<td>13</td>
<td><strong>@CookieParam</strong></td>
<td>给cookie里面传参</td>
</tr>
<tr>
<td>14</td>
<td><strong>@FormParam</strong></td>
<td>给form传参</td>
</tr>
<tr>
<td>15</td>
<td><strong>@DefaultValue</strong></td>
<td>给参数一个默认值</td>
</tr>
<tr>
<td>16</td>
<td><strong>@Context</strong></td>
<td>可以注入HttpRequest，HttpResponse用</td>
</tr>
</tbody>
</table>
<h2 id="规范实现"><a href="#规范实现" class="headerlink" title="规范实现"></a>规范实现</h2><p>下文将以resteasy为例</p>
<a id="more"></a>
<h3 id="包引入"><a href="#包引入" class="headerlink" title="包引入"></a>包引入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jboss.resteasy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>resteasy-jaxrs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;resteasy.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jboss.resteasy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>resteasy-jaxb-provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;resteasy.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>resteasy使用<code>ServletContainerInitializer</code> 接口来初始化项目，如果要开启启动扫描，扫描providers和resources。还需要引入另外一个包。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jboss.resteasy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>resteasy-servlet-initializer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;resteasy.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>跟spring集成，还需要spring的包</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jboss.resteasy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>resteasy-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;resteasy.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>还有一些解析json之类的包</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jboss.resteasy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>resteasy-jackson2-provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;resteasy.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>resteasy根据servlet容器的不同，还有些不同，这里讲的是spring boot继承，不过多赘述，详细见<a href="http://docs.jboss.org/resteasy/docs/3.1.4.Final/userguide/html/Installation_Configuration.html#d4e143" target="_blank" rel="external">这里</a> , 尽管引了这些包，项目也没有和spring boot集成起来，因为项目不能autoconfigure，还有servlet也没有配置的地方。</p>
<blockquote>
<p>这里我提供一个思路，实现 BeanFactoryPostProcessor接口 ，在postProcessBeanFactory 去创建servlet</p>
</blockquote>
<h3 id="Spring-Boot集成"><a href="#Spring-Boot集成" class="headerlink" title="Spring Boot集成"></a>Spring Boot集成</h3><p>另外我提供一种比较简单的方法，直接使用开源集成，这里使用的是paypal开源的一个集成方案。</p>
<ul>
<li><p>引入包</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.paypal.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>resteasy-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"> <span class="comment">&lt;!--PS，上面的那一堆包不用引了，这个就帮我们引入了--&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>引入spring boot的一堆包</p>
</li>
</ul>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ul>
<li><p>指定servletMapping路径</p>
<p>写一个类继承Application，然后交给spring管理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ApplicationPath</span>(<span class="string">"/v1/"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationPathImpl</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>编写restful接口啦</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Path</span>(<span class="string">"province/"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExternalFacadeImpl</span> <span class="keyword">implements</span> <span class="title">ExternalFacade</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * http://localhost:8080/v1/province/city/1</div><div class="line">     * <span class="doctag">@param</span> id</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Path</span>(<span class="string">"city/&#123;id&#125;"</span>)</div><div class="line">    <span class="meta">@GET</span></div><div class="line">    <span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</div><div class="line">    <span class="meta">@Consumes</span>(MediaType.APPLICATION_JSON)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title">getCity</span><span class="params">(@PathParam(<span class="string">"id"</span>)</span> Long id) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>下一篇将介绍常用注解作用</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring-Boot-集成-resteasy篇-—-jax-rs初步介绍和spring-boot集成&quot;&gt;&lt;a href=&quot;#Spring-Boot-集成-resteasy篇-—-jax-rs初步介绍和spring-boot集成&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot 集成 resteasy篇 — jax-rs初步介绍和spring boot集成&quot;&gt;&lt;/a&gt;Spring Boot 集成 resteasy篇 — jax-rs初步介绍和spring boot集成&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;JAX-RS&lt;/strong&gt; 是代表restful web service的一套规范API，JAX-RS规范基于JAVA编程语言，它是用来创建Restful 风格的web services服务的。Jax-rs使用一系列注解来简化java开发。  &lt;/p&gt;
&lt;p&gt;JAX-RS也称jsr339  (全称java specifications requests java规范提案第339个)，由jcp(java community process)组织经过投票通过。  &lt;/p&gt;
&lt;p&gt;为了加深对jsr的理解，举一个简单的例子，jsr 330标准就是依赖注入的提案，已经通过。&lt;/p&gt;
&lt;h2 id=&quot;规范说明&quot;&gt;&lt;a href=&quot;#规范说明&quot; class=&quot;headerlink&quot; title=&quot;规范说明&quot;&gt;&lt;/a&gt;规范说明&lt;/h2&gt;&lt;p&gt;规范定义了一些常见的注解（见下表），用来标注一种资源文件为restfun风格的资源文件&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;序号&lt;/th&gt;
&lt;th&gt;注解&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;@Path&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;类或者方法的相对地址，标注在类或者方法上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;@GET&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;HTTP GET请求用，用来获取资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;@PUT&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;HTTP PUT 请求，用来创建资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;@POST&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;HTTP POST 请求, 用来创建或者更新资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;@DELETE&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;HTTP DELETE请求, 用来删除资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;@HEAD&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;HTTP HEAD请求, 用来获取一个接口是否可用的状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;@Produces&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;返回数据的格式比如APPLICATION/XML, TEXT/HTML, APPLICATION/JSON&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;@Consumes&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;请求数据格式 , 如json&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;@PathParam&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;绑定url里面的参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;@QueryParam&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;绑定url后面的参数（？后面的）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;@MatrixParam&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;绑定包含多个   property (属性)=value(值)   方法参数表达式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;@HeaderParam&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;给header里面传参&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;@CookieParam&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;给cookie里面传参&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;@FormParam&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;给form传参&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;@DefaultValue&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;给参数一个默认值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;@Context&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;可以注入HttpRequest，HttpResponse用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;规范实现&quot;&gt;&lt;a href=&quot;#规范实现&quot; class=&quot;headerlink&quot; title=&quot;规范实现&quot;&gt;&lt;/a&gt;规范实现&lt;/h2&gt;&lt;p&gt;下文将以resteasy为例&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://blog.vrzart.com/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.vrzart.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 集成 resteasy篇 — jax-rs常用注解介绍</title>
    <link href="http://blog.vrzart.com/2017/07/19/Spring%20Boot%20%E9%9B%86%E6%88%90%20resteasy%E7%AF%87%20%E2%80%94%20jax-rs%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%E4%BB%8B%E7%BB%8D/"/>
    <id>http://blog.vrzart.com/2017/07/19/Spring Boot 集成 resteasy篇 — jax-rs常用注解介绍/</id>
    <published>2017-07-19T07:22:01.000Z</published>
    <updated>2017-12-20T05:35:04.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Boot-集成-resteasy篇-—-jax-rs常用注解介绍"><a href="#Spring-Boot-集成-resteasy篇-—-jax-rs常用注解介绍" class="headerlink" title="Spring Boot 集成 resteasy篇 — jax-rs常用注解介绍"></a>Spring Boot 集成 resteasy篇 — jax-rs常用注解介绍</h2><h3 id="GET"><a href="#GET" class="headerlink" title="@GET"></a>@GET</h3><p>http请求方式里面的get请求，标记这个请求方式为get</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * http://localhost:8080/v1/province/city/1</div><div class="line"> * <span class="doctag">@param</span> id</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="meta">@Path</span>(<span class="string">"city/&#123;id&#125;"</span>)</div><div class="line"><span class="meta">@GET</span></div><div class="line"><span class="meta">@Produces</span>(MediaType.APPLICATION_JSON) <span class="comment">//表示输出json</span></div><div class="line"><span class="meta">@Consumes</span>(MediaType.APPLICATION_JSON) <span class="comment">//表示输入为json</span></div><div class="line"><span class="function"><span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title">getCity</span><span class="params">(@PathParam(<span class="string">"id"</span>)</span> Long id) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="PUT"><a href="#PUT" class="headerlink" title="@PUT"></a>@PUT</h3><p>http请求方式里面的get请求，标记这个请求方式为put</p>
<p>一般用来创建一个资源</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Path</span>(<span class="string">"city/&#123;id&#125;"</span>)</div><div class="line"><span class="meta">@PUT</span></div><div class="line"><span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</div><div class="line"><span class="meta">@Consumes</span>(MediaType.APPLICATION_JSON)</div><div class="line"><span class="function"><span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title">getCity</span><span class="params">(@PathParam(<span class="string">"id"</span>)</span> Long id) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###@POST</p>
<p>http请求方式里面的get请求，标记这个请求方式为post</p>
<p>一般用来创建和更新</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Path</span>(<span class="string">"city/&#123;id&#125;"</span>)</div><div class="line"><span class="meta">@POST</span></div><div class="line"><span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</div><div class="line"><span class="meta">@Consumes</span>(MediaType.APPLICATION_JSON)</div><div class="line"><span class="function"><span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title">postCity</span><span class="params">(@PathParam(<span class="string">"id"</span>)</span> Long id) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DELETE"><a href="#DELETE" class="headerlink" title="@DELETE"></a>@DELETE</h3><p>http请求方式里面的get请求，标记这个请求方式为delete</p>
<p>一般用来删除一个资源</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Path</span>(<span class="string">"city/&#123;id&#125;"</span>)</div><div class="line"><span class="meta">@DELETE</span></div><div class="line"><span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</div><div class="line"><span class="meta">@Consumes</span>(MediaType.APPLICATION_JSON)</div><div class="line"><span class="function"><span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title">postCity</span><span class="params">(@PathParam(<span class="string">"id"</span>)</span> Long id) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="PathParam"><a href="#PathParam" class="headerlink" title="@PathParam"></a>@PathParam</h3><p>一般url里面的参数用PathParam</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * http://localhost:8080/v1/province/city/1</div><div class="line">  * <span class="doctag">@param</span> id</div><div class="line">  * <span class="doctag">@return</span></div><div class="line">  */</div><div class="line"> <span class="meta">@Path</span>(<span class="string">"city/&#123;id&#125;"</span>)</div><div class="line"> <span class="meta">@GET</span></div><div class="line"> <span class="meta">@Produces</span>(MediaType.APPLICATION_JSON) <span class="comment">//表示输出json</span></div><div class="line"> <span class="meta">@Consumes</span>(MediaType.APPLICATION_JSON) <span class="comment">//表示输入为json</span></div><div class="line"> <span class="function"><span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title">getCity</span><span class="params">(@PathParam(<span class="string">"id"</span>)</span> Long id) </span>&#123;</div><div class="line"></div><div class="line">     <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;();</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="QueryParam"><a href="#QueryParam" class="headerlink" title="@QueryParam"></a>@QueryParam</h3><p>可以输出url后面的参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * http://localhost:8080/v1/province/queryCity/1?name=wh</div><div class="line">   * <span class="doctag">@param</span> id</div><div class="line">   * <span class="doctag">@return</span></div><div class="line">   */</div><div class="line">  <span class="meta">@Path</span>(<span class="string">"queryCity/&#123;id&#125;"</span>)</div><div class="line">  <span class="meta">@GET</span></div><div class="line">  <span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</div><div class="line">  <span class="meta">@Consumes</span>(MediaType.APPLICATION_JSON)</div><div class="line">  <span class="function"><span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title">queryCity</span><span class="params">(@PathParam(<span class="string">"id"</span>)</span> Long id,@<span class="title">QueryParam</span><span class="params">(<span class="string">"name"</span>)</span>String name) </span>&#123;</div><div class="line">      System.out.println(name);</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;();</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="HeaderParam"><a href="#HeaderParam" class="headerlink" title="@HeaderParam"></a>@HeaderParam</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * http://localhost:8080/v1/province/queryCity/1?name=wh</div><div class="line">     * <span class="doctag">@param</span> id</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Path</span>(<span class="string">"queryCity/&#123;id&#125;"</span>)</div><div class="line">    <span class="meta">@GET</span></div><div class="line">    <span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</div><div class="line">    <span class="meta">@Consumes</span>(MediaType.APPLICATION_JSON)</div><div class="line">    <span class="function"><span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title">queryCity</span><span class="params">(@HeaderParam(<span class="string">"auth"</span>)</span>String authKey,@<span class="title">PathParam</span><span class="params">(<span class="string">"id"</span>)</span> Long id,@<span class="title">QueryParam</span><span class="params">(<span class="string">"name"</span>)</span>String name) </span>&#123;</div><div class="line">        System.out.println(name);</div><div class="line">        System.out.println(authKey);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>效果如下图</p>
<p><img src="https://ojkdckcc1.bkt.clouddn.com/微信截图_20170823120918.png" alt=""></p>
<h3 id="CookieParam"><a href="#CookieParam" class="headerlink" title="@CookieParam"></a>@CookieParam</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * http://localhost:8080/v1/province/queryCity/1?name=wh</div><div class="line">     * <span class="doctag">@param</span> id</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Path</span>(<span class="string">"queryCity/&#123;id&#125;"</span>)</div><div class="line">    <span class="meta">@GET</span></div><div class="line">    <span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</div><div class="line">    <span class="meta">@Consumes</span>(MediaType.APPLICATION_JSON)</div><div class="line">    <span class="function"><span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title">queryCity</span><span class="params">(@CookieParam(<span class="string">"__utma"</span>)</span>String sessionId,@<span class="title">HeaderParam</span><span class="params">(<span class="string">"auth"</span>)</span>String authKey,@<span class="title">PathParam</span><span class="params">(<span class="string">"id"</span>)</span> Long id,@<span class="title">QueryParam</span><span class="params">(<span class="string">"name"</span>)</span>String name) </span>&#123;</div><div class="line">        System.out.println(name);</div><div class="line">        System.out.println(sessionId);</div><div class="line">        System.out.println(authKey);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>注：</strong> _utma是postman里面自带的一个cookie，所以直接调用就可以拿到值，不用额外设置</p>
<h3 id="MatrixParam"><a href="#MatrixParam" class="headerlink" title="@MatrixParam"></a>@MatrixParam</h3><p>matrixParam一般是用来分离参数的，一般和分号一起使用，下例中，分号后面的from被成功识别打印</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * http://localhost:8080/v1/province/queryCity/1;from=wh?name=sh</div><div class="line">     * <span class="doctag">@param</span> id</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Path</span>(<span class="string">"queryCity/&#123;id&#125;"</span>)</div><div class="line">    <span class="meta">@GET</span></div><div class="line">    <span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</div><div class="line">    <span class="meta">@Consumes</span>(MediaType.APPLICATION_JSON)</div><div class="line">    <span class="function"><span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title">queryCity</span><span class="params">(@MatrixParam(<span class="string">"from"</span>)</span>String from,@<span class="title">CookieParam</span><span class="params">(<span class="string">"__utma"</span>)</span>String sessionId,@<span class="title">HeaderParam</span><span class="params">(<span class="string">"auth"</span>)</span>String authKey,@<span class="title">PathParam</span><span class="params">(<span class="string">"id"</span>)</span> Long id,@<span class="title">QueryParam</span><span class="params">(<span class="string">"name"</span>)</span>String name) </span>&#123;</div><div class="line">        System.out.println(id);</div><div class="line">        System.out.println(name);</div><div class="line">        System.out.println(sessionId);</div><div class="line">        System.out.println(authKey);</div><div class="line">        System.out.println(from);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div><div class="line">sh</div><div class="line"><span class="number">111872281.1804816201</span>.1493794349.1495509065.1496976869.12</div><div class="line">xsdfarewrsdfjnainrfa;ewe==</div><div class="line">wh</div></pre></td></tr></table></figure>
<h3 id="FormParam"><a href="#FormParam" class="headerlink" title="@FormParam"></a>@FormParam</h3><p>postman里面改为post请求，表单中添加age参数，得到输出</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     *  http://localhost:8080/v1/province/city/1?name=%22%E5%B0%8F%E6%98%8E%22</div><div class="line">     * <span class="doctag">@param</span> id</div><div class="line">     * <span class="doctag">@param</span> name</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@POST</span></div><div class="line">    <span class="meta">@Path</span>(<span class="string">"city/&#123;id&#125;"</span>)</div><div class="line">    <span class="meta">@Consumes</span>(MediaType.APPLICATION_FORM_URLENCODED)</div><div class="line">    <span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</div><div class="line">    <span class="function"><span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title">addBook</span><span class="params">(@FormParam(<span class="string">"age"</span>)</span>Integer age,@<span class="title">PathParam</span><span class="params">(<span class="string">"id"</span>)</span> String id, @<span class="title">QueryParam</span><span class="params">(<span class="string">"name"</span>)</span> String name) </span>&#123;</div><div class="line">        System.out.println(id);</div><div class="line">        System.out.println(name);</div><div class="line">        System.out.println(age);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div><div class="line">sh</div><div class="line"><span class="number">23</span></div></pre></td></tr></table></figure>
<p>###@Form</p>
<p>这个注解，允许你将你的form注入到一个实体里面，看例子吧</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyForm</span> </span>&#123;</div><div class="line">    <span class="meta">@FormParam</span>(<span class="string">"age"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="meta">@HeaderParam</span>(<span class="string">"auth"</span>)</div><div class="line">    <span class="keyword">private</span> String authKey;</div><div class="line">    <span class="meta">@PathParam</span>(<span class="string">"id"</span>)</div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthKey</span><span class="params">(String authKey)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.authKey = authKey;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthKey</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> authKey;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PUT</span></div><div class="line"><span class="meta">@Path</span>(<span class="string">"city/&#123;id&#125;"</span>)</div><div class="line"><span class="meta">@Consumes</span>(MediaType.APPLICATION_FORM_URLENCODED)</div><div class="line"><span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</div><div class="line"><span class="function"><span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title">addForm</span><span class="params">(@Form MyForm form)</span> </span>&#123;</div><div class="line">    System.out.println(JSON.toJSONString(form));</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">"age"</span>:<span class="number">23</span>,<span class="string">"authKey"</span>:<span class="string">"xsdfarewrsdfjnainrfa;ewe=="</span>,<span class="string">"id"</span>:<span class="string">"1"</span>&#125;</div></pre></td></tr></table></figure>
<p>同样也可以把@Form注入到一个实体里面去</p>
<h3 id="DefaultValue"><a href="#DefaultValue" class="headerlink" title="@DefaultValue"></a>@DefaultValue</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * http://localhost:8080/v1/province/queryCity/1?name=wh</div><div class="line">    * <span class="doctag">@param</span> id</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line">   <span class="meta">@Path</span>(<span class="string">"queryCity/&#123;id&#125;"</span>)</div><div class="line">   <span class="meta">@GET</span></div><div class="line">   <span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</div><div class="line">   <span class="meta">@Consumes</span>(MediaType.APPLICATION_JSON)</div><div class="line">   <span class="function"><span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title">queryCity</span><span class="params">(@PathParam(<span class="string">"id"</span>)</span> Long id,@<span class="title">DefaultValue</span><span class="params">(<span class="string">"sh"</span>)</span>@<span class="title">QueryParam</span><span class="params">(<span class="string">"name"</span>)</span>String name) </span>&#123;</div><div class="line">       System.out.println(name);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>可以在queryParam前面加一个默认值</p>
<h3 id="Context"><a href="#Context" class="headerlink" title="@Context"></a>@Context</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">The <span class="meta">@Context</span> 注解允许你注入下面这些类</div><div class="line">• javax.ws.rs.core.HttpHeaders</div><div class="line">• javax.ws.rs.core.UriInfo</div><div class="line">• javax.ws.rs.core.Request</div><div class="line">• javax.servlet.http.HttpServletRequest</div><div class="line">• javax.servlet.http.HttpServletResponse</div><div class="line">• javax.servlet.ServletConfig</div><div class="line">• javax.servlet.ServletContext</div><div class="line">• javax.ws.rs.core.SecurityContext</div><div class="line">在filter中使用较多</div></pre></td></tr></table></figure>
<h3 id="Encoded-and-encoding"><a href="#Encoded-and-encoding" class="headerlink" title="@Encoded and encoding"></a>@Encoded and encoding</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * http://localhost:8080/v1/province/en_city/小明</div><div class="line">     * <span class="doctag">@param</span> name</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Path</span>(value = <span class="string">"en_city/&#123;name&#125;"</span>)</div><div class="line">    <span class="meta">@GET</span></div><div class="line">    <span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</div><div class="line">    <span class="meta">@Consumes</span>(MediaType.APPLICATION_JSON)</div><div class="line">    <span class="function"><span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title">getCity</span><span class="params">(@PathParam(<span class="string">"name"</span>)</span>@Encoded String name) </span>&#123;</div><div class="line">        System.out.println(name);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%E5%B0%<span class="number">8F</span>%E6%<span class="number">98</span>%<span class="number">8</span>E</div></pre></td></tr></table></figure>
<blockquote>
<p>end</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring-Boot-集成-resteasy篇-—-jax-rs常用注解介绍&quot;&gt;&lt;a href=&quot;#Spring-Boot-集成-resteasy篇-—-jax-rs常用注解介绍&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot 集成 resteasy篇 — jax-rs常用注解介绍&quot;&gt;&lt;/a&gt;Spring Boot 集成 resteasy篇 — jax-rs常用注解介绍&lt;/h2&gt;&lt;h3 id=&quot;GET&quot;&gt;&lt;a href=&quot;#GET&quot; class=&quot;headerlink&quot; title=&quot;@GET&quot;&gt;&lt;/a&gt;@GET&lt;/h3&gt;&lt;p&gt;http请求方式里面的get请求，标记这个请求方式为get&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * http://localhost:8080/v1/province/city/1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; id&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;city/&amp;#123;id&amp;#125;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@GET&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Produces&lt;/span&gt;(MediaType.APPLICATION_JSON) &lt;span class=&quot;comment&quot;&gt;//表示输出json&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Consumes&lt;/span&gt;(MediaType.APPLICATION_JSON) &lt;span class=&quot;comment&quot;&gt;//表示输入为json&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Result&amp;lt;Boolean&amp;gt; &lt;span class=&quot;title&quot;&gt;getCity&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@PathParam(&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;)&lt;/span&gt; Long id) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Result&amp;lt;&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://blog.vrzart.com/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="http://blog.vrzart.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>高可用数据同步方案-SqlServer迁移Mysql实战</title>
    <link href="http://blog.vrzart.com/2017/07/04/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88-SqlServer%E8%BF%81%E7%A7%BBMysql%E5%AE%9E%E6%88%98/"/>
    <id>http://blog.vrzart.com/2017/07/04/高可用数据同步方案-SqlServer迁移Mysql实战/</id>
    <published>2017-07-04T07:22:01.000Z</published>
    <updated>2017-12-21T06:32:17.201Z</updated>
    
    <content type="html"><![CDATA[<h3 id="高可用数据同步方案-SqlServer迁移Mysql实战"><a href="#高可用数据同步方案-SqlServer迁移Mysql实战" class="headerlink" title="高可用数据同步方案-SqlServer迁移Mysql实战"></a>高可用数据同步方案-SqlServer迁移Mysql实战</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>  随着业务量的上升，以前的架构已经不满足业务的发展，数据作为业务中最重要的一环，需要有更好的架构作为支撑。目前我司有sql server转mysql的需求，所以结合当前业务，我挑选了阿里云开源的一个很好用的同步工具DataX</p>
<h5 id="DataX介绍"><a href="#DataX介绍" class="headerlink" title="DataX介绍"></a>DataX介绍</h5><blockquote>
<p>DataX 是一个异构数据源离线同步工具，致力于实现包括关系型数据库(MySQL、Oracle等)、HDFS、Hive、MaxCompute(原ODPS)、HBase、FTP等各种异构数据源之间稳定高效的数据同步功能。</p>
</blockquote>
<h5 id="框架设计"><a href="#框架设计" class="headerlink" title="框架设计"></a>框架设计</h5><p><img src="https://cloud.githubusercontent.com/assets/1067175/17879884/ec7e36f4-6927-11e6-8f5f-ffc43d6a468b.png" alt="datax_framework_new"></p>
<p>DataX本身作为离线数据同步框架，采用Framework + plugin架构构建。将数据源读取和写入抽象成为Reader/Writer插件，纳入到整个同步框架中。</p>
<ul>
<li>Reader：Reader为数据采集模块，负责采集数据源的数据，将数据发送给Framework。</li>
<li>Writer： Writer为数据写入模块，负责不断向Framework取数据，并将数据写入到目的端。</li>
<li>Framework：Framework用于连接reader和writer，作为两者的数据传输通道，并处理缓冲，流控，并发，数据转换等核心技术问题。</li>
</ul>
<a id="more"></a>
<h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><h5 id="下载安装部署"><a href="#下载安装部署" class="headerlink" title="下载安装部署"></a>下载安装部署</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> wget http://datax-opensource.oss-cn-hangzhou.aliyuncs.com/datax.tar.gz</div><div class="line"><span class="meta">$</span> tar zxvf datax.tar.gz</div><div class="line"><span class="meta">$</span> sudo chmod -R 755 &#123;YOUR_DATAX_HOME&#125;</div></pre></td></tr></table></figure>
<p>也可以自己下载源码安装，不过需要安装maven</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git clone git@github.com:alibaba/DataX.git</div><div class="line"><span class="meta">$</span> cd  &#123;DataX_source_code_home&#125;</div><div class="line"><span class="meta">$</span> mvn -U clean package assembly:assembly -Dmaven.test.skip=true</div></pre></td></tr></table></figure>
<p>打包成功后的DataX包位于 {DataX_source_code_home}/target/datax/datax/ ，结构如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> cd  &#123;DataX_source_code_home&#125;</div><div class="line"><span class="meta">$</span> ls ./target/datax/datax/</div><div class="line">   bin		conf		job		lib		log		log_perf	plugin</div></pre></td></tr></table></figure>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>你需要编写一个基本信息配置文件，文件包括原库到写入库的表字段对应关系。基本信息包括</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  "job": &#123;</div><div class="line">    "content": [</div><div class="line">      &#123;</div><div class="line">        "reader": &#123;        //读入库配置，比如说是sql server</div><div class="line">          "name": "",      //数据源名称，别瞎写</div><div class="line">          "parameter": &#123;&#125;  //数据库配置信息</div><div class="line">        &#125;,</div><div class="line">        "writer": &#123;        //写入库配置，比如说是mysql</div><div class="line">          "name": "",      //数据源名称，别瞎写</div><div class="line">          "parameter": &#123;&#125;  //数据库配置信息</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    "setting": &#123;            //基本设置</div><div class="line">      "speed": &#123;            //流量控制</div><div class="line">        "channel": 1,       //同步时候的并发数</div><div class="line">        "byte": 104857600   //同步时候的字节大小，影响速度</div><div class="line">      &#125;,</div><div class="line">      "errorLimit": &#123;       //脏数据控制</div><div class="line">        "record": 10,       //脏数据最大记录数阈值</div><div class="line">        "percentage": 0.05  //脏数据占比阈值</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面给一个配置demo，大家根据自己的需要修改demo，然后使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">     "job": &#123;</div><div class="line">          "setting": &#123;</div><div class="line">               "speed": &#123;</div><div class="line">                    "byte": 1073741824</div><div class="line">               &#125;</div><div class="line">          &#125;,</div><div class="line">          "content": [</div><div class="line">               &#123;</div><div class="line">                    "reader": &#123;</div><div class="line">                         "name": "sqlserverreader",</div><div class="line">                         "parameter": &#123;</div><div class="line">                              "username": "root",  //自己根据需要修改数据库用户名</div><div class="line">                              "password": "admin", //密码</div><div class="line">                              "where": "",</div><div class="line">                              "connection": [</div><div class="line">                                   &#123;</div><div class="line">                                        "querySql": [</div><div class="line">                                             "SELECT Id,MyReasonId,MyProductType,MyReason FROM dbo.MyReason  WITH ( NOLOCK )"</div><div class="line">                                        ],//全量sql,根据自己需要写增量sql也可以</div><div class="line">                                        "jdbcUrl": [</div><div class="line">                                             "jdbc:sqlserver://192.168.1.1:1433;DatabaseName=XXXX"</div><div class="line">                                        ]//自己根据需要修改数据库连接</div><div class="line">                                   &#125;</div><div class="line">                              ]</div><div class="line">                         &#125;</div><div class="line">                    &#125;,</div><div class="line">                    "writer": &#123;</div><div class="line">                         "name": "mysqlwriter",</div><div class="line">                         "parameter": &#123;</div><div class="line">                              "writeMode": "insert",  //写入模式，这里写插入</div><div class="line">                              "username": "root",//自己根据需要修改数据库用户名</div><div class="line">                              "password": "admin",//密码</div><div class="line">                              "column": [</div><div class="line">                                    "id",       //注意与上面的列一一对应</div><div class="line">                                    "my_reason_id",</div><div class="line">                                    "my_product_type",</div><div class="line">                                    "my_reason" </div><div class="line">                                    ],</div><div class="line">                              "connection": [</div><div class="line">                                   &#123;</div><div class="line">                                        "jdbcUrl": "jdbc:mysql://192.168.1.2:3306/XXX?useUnicode=true&amp;characterEncoding=utf-8",</div><div class="line">                                        "table": [</div><div class="line">                                             "my_reason"</div><div class="line">                                        ]</div><div class="line">                                   &#125;</div><div class="line">                              ]</div><div class="line">                         &#125;</div><div class="line">                    &#125;</div><div class="line">               &#125;</div><div class="line">          ]</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编辑好之后，放到新建work目录里面，然后存为mssql_to_mysql.json，下面就可以运行了</p>
<h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> cd  &#123;YOUR_DATAX_HOME&#125;/bin</div><div class="line"><span class="meta">$</span> python datax.py ../work/mssql_to_mysql.json</div></pre></td></tr></table></figure>
<p>同步结束，显示日志如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">2015-12-17 11:20:25.263 [job-0] INFO  JobContainer - </div><div class="line">任务启动时刻                    : 2015-12-17 11:20:15</div><div class="line">任务结束时刻                    : 2015-12-17 11:20:25</div><div class="line">任务总计耗时                    :                 10s</div><div class="line">任务平均流量                    :              205B/s</div><div class="line">记录写入速度                    :              5rec/s</div><div class="line">读出记录总数                    :                  50</div><div class="line">读写失败总数                    :                   0</div></pre></td></tr></table></figure>
<p>这样就说明成功啦</p>
<h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><h5 id="job配置"><a href="#job配置" class="headerlink" title="job配置"></a>job配置</h5><p>将你需要同步的增量数据放入到安装目录job下面，存为myjob.json，名称随意</p>
<p>linux下通过crontab命令实现</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>查看crond服务是否启动，出现以下日志表示已启动</div><div class="line"><span class="meta">$</span>/sbin/service crond status</div><div class="line"> crond (pid  30742) is running...</div></pre></td></tr></table></figure>
<ul>
<li><p>第一步：创建作业的配置文件（json格式） 参考上节内容。这里假设已配置好MySQL到ODPS的配置文件mysql2odps.json</p>
</li>
<li><p>第二步：列出列出crontab文件，命令： crontab -l<br>（1）若出现以下日志，表示当前用户没有定时任务，用户需要新建crontab文件，并提交crontab文件，参考第三步。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$crontab -l</div><div class="line"> no crontab for xxx</div></pre></td></tr></table></figure>
</li>
</ul>
<p>（2）若出现以下日志，表示当前用户已经有正在运行的定时任务，用户只需用命令crontab -e 来编辑crontab文件，参考第四步。 <code>shell $ crontab -l 0,10,20,35,44,50 * * * * python /home/admin/datax3/bin/datax.py /home/admin/mysql2odps.json &gt;&gt;/home/hanfa.shf/log.</code>date +\%Y\%m\%d\%H\%M\%S<code>2&gt;&amp;1</code></p>
<ul>
<li><p>第三步：若当前用户没有定时任务（之前从未创建过crontab任务)</p>
<p>​</p>
<p>（1）创建一个新的crontab文件，如取名crondatax</p>
<p>​</p>
<p>示例1：每天13点5分进行同步作业，并把运行日志输出到目录/home/hanfa.shf/下log.运行时间 文件中,如定时运行是在2016-3-26 13:10:13运行的，产生的日志文件名为：log.20160326131023</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ vim crondatax</div><div class="line">#输入以下内容</div><div class="line">5  13 * * *  python /home/admin/datax3/bin/datax.py /home/admin/mysql2odps.json  &gt;&gt;/home/hanfa.shf/log.`date +\%Y\%m\%d\%H\%M\%S`  2&gt;&amp;1</div><div class="line">#/home/admin/datax3/bin/datax.py 表示你安装的DataX datax.py所在目录（请替换为您真实的绝对路径目录）；</div><div class="line">#/home/admin/mysql2odps.json  表示作业的配置文件目录（请替换为您真实的绝对路径目录）；</div><div class="line">#/home/hanfa.shf/log.`date +\%Y\%m\%d\%H\%M\%S` 表示日志输出位置，并以log.当前时间 命名（请替换为您真实的绝对路径目录）</div></pre></td></tr></table></figure>
</li>
</ul>
<p>（2）提交你刚刚创建的crontab文件 <code>shell $ crontab crondatax #crondatax 你创建的crontab文件名</code>（3）重启crontab服务 <code>shell $ sudo /etc/init.d/crond restart Stopping crond: [ OK ] Starting crond: [ OK ]</code> （4）在13点5分过后，在日志目录会看到对应的日文件 <code>shell $ ls -al /home/hanfa.shf/ -rw-r--r-- 1 hanfa.shf users 12062 Mar 26 13:05 log.20160326130501</code></p>
<blockquote>
<p>进阶内容引自官方教程 ^_^</p>
</blockquote>
<div style="color:red">感谢我媳妇儿品品支持创作</div>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;高可用数据同步方案-SqlServer迁移Mysql实战&quot;&gt;&lt;a href=&quot;#高可用数据同步方案-SqlServer迁移Mysql实战&quot; class=&quot;headerlink&quot; title=&quot;高可用数据同步方案-SqlServer迁移Mysql实战&quot;&gt;&lt;/a&gt;高可用数据同步方案-SqlServer迁移Mysql实战&lt;/h3&gt;&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;  随着业务量的上升，以前的架构已经不满足业务的发展，数据作为业务中最重要的一环，需要有更好的架构作为支撑。目前我司有sql server转mysql的需求，所以结合当前业务，我挑选了阿里云开源的一个很好用的同步工具DataX&lt;/p&gt;
&lt;h5 id=&quot;DataX介绍&quot;&gt;&lt;a href=&quot;#DataX介绍&quot; class=&quot;headerlink&quot; title=&quot;DataX介绍&quot;&gt;&lt;/a&gt;DataX介绍&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;DataX 是一个异构数据源离线同步工具，致力于实现包括关系型数据库(MySQL、Oracle等)、HDFS、Hive、MaxCompute(原ODPS)、HBase、FTP等各种异构数据源之间稳定高效的数据同步功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;框架设计&quot;&gt;&lt;a href=&quot;#框架设计&quot; class=&quot;headerlink&quot; title=&quot;框架设计&quot;&gt;&lt;/a&gt;框架设计&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/1067175/17879884/ec7e36f4-6927-11e6-8f5f-ffc43d6a468b.png&quot; alt=&quot;datax_framework_new&quot;&gt;&lt;/p&gt;
&lt;p&gt;DataX本身作为离线数据同步框架，采用Framework + plugin架构构建。将数据源读取和写入抽象成为Reader/Writer插件，纳入到整个同步框架中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reader：Reader为数据采集模块，负责采集数据源的数据，将数据发送给Framework。&lt;/li&gt;
&lt;li&gt;Writer： Writer为数据写入模块，负责不断向Framework取数据，并将数据写入到目的端。&lt;/li&gt;
&lt;li&gt;Framework：Framework用于连接reader和writer，作为两者的数据传输通道，并处理缓冲，流控，并发，数据转换等核心技术问题。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://blog.vrzart.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://blog.vrzart.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>spring boot给接口返回添加输入输出日志</title>
    <link href="http://blog.vrzart.com/2017/06/09/Spring%20boot%E8%BF%94%E5%9B%9Erequest%E3%80%81response%20log%E6%B7%BB%E5%8A%A0/"/>
    <id>http://blog.vrzart.com/2017/06/09/Spring boot返回request、response log添加/</id>
    <published>2017-06-09T06:49:57.295Z</published>
    <updated>2017-12-28T09:10:24.196Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-boot返回request、response-添加log"><a href="#Spring-boot返回request、response-添加log" class="headerlink" title="Spring boot返回request、response 添加log"></a>Spring boot返回request、response 添加log</h3><p>目前有个需求需要给接口返回添加输入输出日志，目前比价常用的方法就是使用过滤器，就可以很方便的拦截到输入请求和输出请求，那么在过滤器里面如何<code>HttpServletRequest</code> <code>HttpServletRequest</code>这两个对象输入和输出日志呢？</p>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>事实上javax包里面本来就提供HttpServletRequstWrapper、HttpServletResponseWrapper两个包装类进行对请求、和放回进行拦截、我们实现这两个，这样我们就能够写一些单独的东西，就可以实现我们的效果</p>
<h4 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h4><p>request代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(RequestWrapper.class);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] body;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestWrapper</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">super</span>(request);</div><div class="line">        body = getBodyString(request).getBytes(Charset.forName(<span class="string">"UTF-8"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> BufferedReader <span class="title">getReader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(getInputStream()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//这里从body里面直接读了，没有去读inputStream了，很巧妙的方式</span></div><div class="line">        <span class="keyword">final</span> ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(body);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletInputStream() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                <span class="keyword">return</span> bais.read();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFinished</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadListener</span><span class="params">(ReadListener readListener)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">getBodyString</span><span class="params">(ServletRequest request)</span> </span>&#123;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        InputStream inputStream = <span class="keyword">null</span>;</div><div class="line">        BufferedReader reader = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            inputStream = request.getInputStream();</div><div class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream, Charset.forName(<span class="string">"UTF-8"</span>)));</div><div class="line">            String line = <span class="string">""</span>;</div><div class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">                sb.append(line);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            logger.warn(<span class="string">"处理异常"</span>,e);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    inputStream.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    logger.warn(<span class="string">"处理异常"</span>,e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    reader.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    logger.warn(<span class="string">"处理异常"</span>,e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先写一个<strong>ResponseWrapper</strong>类来继承HttpServletResponseWrapper</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.dzy.itar.pinpin.support.filter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.io.output.TeeOutputStream;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.WriteListener;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponseWrapper;</div><div class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletResponseWrapper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">    <span class="keyword">private</span> PrintWriter writer = <span class="keyword">new</span> PrintWriter(bos);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResponseWrapper</span><span class="params">(Long requestId, HttpServletResponse response)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(response);</div><div class="line">        <span class="keyword">this</span>.id = requestId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServletResponse <span class="title">getResponse</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletOutputStream() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWriteListener</span><span class="params">(WriteListener writeListener)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">private</span> TeeOutputStream tee = <span class="keyword">new</span> TeeOutputStream(ResponseWrapper.<span class="keyword">super</span>.getOutputStream(), bos);</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                tee.write(b);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PrintWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TeePrintWriter(<span class="keyword">super</span>.getWriter(), writer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] toByteArray()&#123;</div><div class="line">        <span class="keyword">return</span> bos.toByteArray();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.dzy.itar.pinpin.support.filter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeePrintWriter</span> <span class="keyword">extends</span> <span class="title">PrintWriter</span></span>&#123;</div><div class="line"></div><div class="line">    PrintWriter branch;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TeePrintWriter</span><span class="params">(PrintWriter main, PrintWriter branch)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(main, <span class="keyword">true</span>);</div><div class="line">        <span class="keyword">this</span>.branch = branch;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> buf[], <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.write(buf, off, len);</div><div class="line">        <span class="keyword">super</span>.flush();</div><div class="line">        branch.write(buf, off, len);</div><div class="line">        branch.flush();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String s, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.write(s, off, len);</div><div class="line">        <span class="keyword">super</span>.flush();</div><div class="line">        branch.write(s, off, len);</div><div class="line">        branch.flush();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.write(c);</div><div class="line">        <span class="keyword">super</span>.flush();</div><div class="line">        branch.write(c);</div><div class="line">        branch.flush();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.flush();</div><div class="line">        branch.flush();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.dzy.itar.pinpin.support.filter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(LoggingFilter.class);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REQUEST_PREFIX = <span class="string">"Request: "</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RESPONSE_PREFIX = <span class="string">"Response: "</span>;</div><div class="line">    <span class="keyword">private</span> AtomicLong id = <span class="keyword">new</span> AtomicLong(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="keyword">final</span> FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">            <span class="keyword">long</span> requestId = id.incrementAndGet();</div><div class="line">            request = <span class="keyword">new</span> RequestWrapper(requestId, request);</div><div class="line">            response = <span class="keyword">new</span> ResponseWrapper(requestId, response);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            filterChain.doFilter(request, response);</div><div class="line"><span class="comment">//            response.flushBuffer();</span></div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                logRequest(request);</div><div class="line">                logResponse((ResponseWrapper) response);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">logRequest</span><span class="params">(<span class="keyword">final</span> HttpServletRequest request)</span> </span>&#123;</div><div class="line">        StringBuilder msg = <span class="keyword">new</span> StringBuilder();</div><div class="line">        msg.append(REQUEST_PREFIX);</div><div class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> RequestWrapper) &#123;</div><div class="line">            msg.append(<span class="string">"request id="</span>).append(((RequestWrapper) request).getId()).append(<span class="string">"; "</span>);</div><div class="line">        &#125;</div><div class="line">        HttpSession session = request.getSession(<span class="keyword">false</span>);</div><div class="line">        <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</div><div class="line">            msg.append(<span class="string">"session id="</span>).append(session.getId()).append(<span class="string">"; "</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (request.getMethod() != <span class="keyword">null</span>) &#123;</div><div class="line">            msg.append(<span class="string">"method="</span>).append(request.getMethod()).append(<span class="string">"; "</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (request.getContentType() != <span class="keyword">null</span>) &#123;</div><div class="line">            msg.append(<span class="string">"content type="</span>).append(request.getContentType()).append(<span class="string">"; "</span>);</div><div class="line">        &#125;</div><div class="line">        msg.append(<span class="string">"uri="</span>).append(request.getRequestURI());</div><div class="line">        <span class="keyword">if</span> (request.getQueryString() != <span class="keyword">null</span>) &#123;</div><div class="line">            msg.append(<span class="string">'?'</span>).append(request.getQueryString());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> RequestWrapper &amp;&amp; !isMultipart(request) &amp;&amp; !isBinaryContent(request)) &#123;</div><div class="line">            RequestWrapper requestWrapper = (RequestWrapper) request;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                String charEncoding = requestWrapper.getCharacterEncoding() != <span class="keyword">null</span> ? requestWrapper.getCharacterEncoding() :</div><div class="line">                        <span class="string">"UTF-8"</span>;</div><div class="line">                msg.append(<span class="string">"; payload="</span>).append(<span class="keyword">new</span> String(requestWrapper.toByteArray(), charEncoding));</div><div class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">                logger.warn(<span class="string">"Failed to parse request payload"</span>, e);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        logger.debug(msg.toString());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBinaryContent</span><span class="params">(<span class="keyword">final</span> HttpServletRequest request)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (request.getContentType() == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> request.getContentType().startsWith(<span class="string">"image"</span>) || request.getContentType().startsWith(<span class="string">"video"</span>) || request.getContentType().startsWith(<span class="string">"audio"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isMultipart</span><span class="params">(<span class="keyword">final</span> HttpServletRequest request)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> request.getContentType() != <span class="keyword">null</span> &amp;&amp; request.getContentType().startsWith(<span class="string">"multipart/form-data"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">logResponse</span><span class="params">(<span class="keyword">final</span> ResponseWrapper response)</span> </span>&#123;</div><div class="line">        StringBuilder msg = <span class="keyword">new</span> StringBuilder();</div><div class="line">        msg.append(RESPONSE_PREFIX);</div><div class="line">        msg.append(<span class="string">"request id="</span>).append((response.getId()));</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            msg.append(<span class="string">"; payload="</span>).append(<span class="keyword">new</span> String(response.toByteArray(), response.getCharacterEncoding()));</div><div class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">            logger.warn(<span class="string">"Failed to parse response payload"</span>, e);</div><div class="line">        &#125;</div><div class="line">        logger.debug(msg.toString());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PrintWriter是一种写入字符的一种操作类，可以写入字符，TeePrintWriter继承了他，主要功能是把原始的字符流copy到branch里面。</p>
<p>LoggingFilter是一种filter，继承OncePerRequestFilter，每次请求都会经过他。</p>
<p>主要代码就是上面这样的，我把代码放到了<a href="https://git.oschina.net/mfun/request-response-test.git" target="_blank" rel="external">这里</a>大家可以下载借鉴</p>
<h4 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h4><p>SpringMVC在处理完毕请求之后，会调用<code>AbstractMessageConverterMethodProcessor</code>里的<code>writeWithMessageConverters</code>方法，然后会调用<code>AbstractGenericHttpMessageConverter</code> 的write方法，把返回的接口输出到HttpOutputMessage里面去，事实上，然后会调用WriteInternal方法</p>
<p><img src="https://ojkdckcc1.bkt.clouddn.com/微信截图_20170526190609.png" alt=""></p>
<p>然后里面有getBody（）方法，然后里面就调用到了我们的getOutputStream方法，终于走到我们写的方法了</p>
<p><img src="https://ojkdckcc1.bkt.clouddn.com/微信截图_20170609133912.png" alt=""></p>
<p>然后我们就可以处理这个流了</p>
<p>主要是copy了一份，然后再filter里面打印了出来</p>
<p>完毕</p>
<p>！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-boot返回request、response-添加log&quot;&gt;&lt;a href=&quot;#Spring-boot返回request、response-添加log&quot; class=&quot;headerlink&quot; title=&quot;Spring boot返回request、r
    
    </summary>
    
    
      <category term="spring boot" scheme="http://blog.vrzart.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>高并发的核心技术-幂等的实现方案</title>
    <link href="http://blog.vrzart.com/2017/05/26/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%9A%84%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%B9%82%E7%AD%89%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/"/>
    <id>http://blog.vrzart.com/2017/05/26/高并发的核心技术-幂等的实现方案/</id>
    <published>2017-05-26T11:14:31.072Z</published>
    <updated>2017-01-10T11:21:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="高并发的核心技术-幂等的实现方案"><a href="#高并发的核心技术-幂等的实现方案" class="headerlink" title="高并发的核心技术-幂等的实现方案"></a>高并发的核心技术-幂等的实现方案</h3><p>一、背景<br>我们实际系统中有很多操作，是不管做多少次，都应该产生一样的效果或返回一样的结果。<br>例如： </p>
<ol>
<li>前端重复提交选中的数据，应该后台只产生对应这个数据的一个反应结果。 </li>
<li>我们发起一笔付款请求，应该只扣用户账户一次钱，当遇到网络重发或系统bug重发，也应该只扣一次钱； </li>
<li>发送消息，也应该只发一次，同样的短信发给用户，用户会哭的； </li>
<li>创建业务订单，一次业务请求只能创建一个，创建多个就会出大问题。 </li>
</ol>
<p>等等很多重要的情况，这些逻辑都需要幂等的特性来支持。 </p>
<a id="more"></a>
<p>二、幂等性概念<br>幂等（idempotent、idempotence）是一个数学与计算机学概念，常见于抽象代数中。 </p>
<p>在编程中.一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。这些函数不会影响系统状态，也不用担心重复执行会对系统造成改变。例如，“getUsername()和setTrue()”函数就是一个幂等函数. </p>
<p>更复杂的操作幂等保证是利用唯一交易号(流水号)实现. </p>
<p>我的理解：幂等就是一个操作，不论执行多少次，产生的效果和返回的结果都是一样的 </p>
<p>三、技术方案 </p>
<ol>
<li><p>查询操作<br>查询一次和查询多次，在数据不变的情况下，查询结果是一样的。select是天然的幂等操作 </p>
</li>
<li><p>删除操作<br>删除操作也是幂等的，删除一次和多次删除都是把数据删除。(注意可能返回结果不一样，删除的数据不存在，返回0，删除的数据多条，返回结果多个) </p>
</li>
</ol>
<p>3.唯一索引，防止新增脏数据<br>比如：支付宝的资金账户，支付宝也有用户账户，每个用户只能有一个资金账户，怎么防止给用户创建资金账户多个，那么给资金账户表中的用户ID加唯一索引，所以一个用户新增成功一个资金账户记录 </p>
<p>要点：<br>唯一索引或唯一组合索引来防止新增数据存在脏数据<br>（当表存在唯一索引，并发时新增报错时，再查询一次就可以了，数据应该已经存在了，返回结果即可） </p>
<ol>
<li>token机制，防止页面重复提交<br>业务要求：<br>页面的数据只能被点击提交一次<br>发生原因：<br>由于重复点击或者网络重发，或者nginx重发等情况会导致数据被重复提交<br>解决办法：<br>集群环境：采用token加redis（redis单线程的，处理需要排队）<br>单JVM环境：采用token加redis或token加jvm内存<br>处理流程： </li>
<li>数据提交前要向服务的申请token，token放到redis或jvm内存，token有效时间 </li>
<li>提交后后台校验token，同时删除token，生成新的token返回<br>token特点：<br>要申请，一次有效性，可以限流 </li>
</ol>
<p>注意：redis要用删除操作来判断token，删除成功代表token校验通过，如果用select+delete来校验token，存在并发问题，不建议使用 </p>
<ol>
<li><p>悲观锁<br>获取数据的时候加锁获取<br>select * from table_xxx where id=’xxx’ for update;<br>注意：id字段一定是主键或者唯一索引，不然是锁表，会死人的<br>悲观锁使用时一般伴随事务一起使用，数据锁定时间可能会很长，根据实际情况选用 </p>
</li>
<li><p>乐观锁<br>乐观锁只是在更新数据那一刻锁表，其他时间不锁表，所以相对于悲观锁，效率更高。 </p>
</li>
</ol>
<p>乐观锁的实现方式多种多样可以通过version或者其他状态条件： </p>
<ol>
<li>通过版本号实现<br>update table_xxx set name=#name#,version=version+1 where version=#version#<br>如下图(来自网上)： </li>
</ol>
<ol>
<li>通过条件限制<br>update table_xxx set avai_amount=avai_amount-#subAmount# where avai_amount-#subAmount# &gt;= 0<br>要求：quality-#subQuality# &gt;= ，这个情景适合不用版本号，只更新是做数据安全校验，适合库存模型，扣份额和回滚份额，性能更高 </li>
</ol>
<p>注意：乐观锁的更新操作，最好用主键或者唯一索引来更新,这样是行锁，否则更新时会锁表，上面两个sql改成下面的两个更好<br>update table_xxx set name=#name#,version=version+1 where id=#id# and version=#version#<br>update table_xxx set avai_amount=avai_amount-#subAmount# where id=#id# and avai_amount-#subAmount# &gt;= 0 </p>
<ol>
<li>分布式锁<br>还是拿插入数据的例子，如果是分布是系统，构建全局唯一索引比较困难，例如唯一性的字段没法确定，这时候可以引入分布式锁，通过第三方的系统(redis或zookeeper)，在业务系统插入数据或者更新数据，获取分布式锁，然后做操作，之后释放锁，这样其实是把多线程并发的锁的思路，引入多多个系统，也就是分布式系统中得解决思路。 </li>
</ol>
<p>要点：某个长流程处理过程要求不能并发执行，可以在流程执行之前根据某个标志(用户ID+后缀等)获取分布式锁，其他流程执行时获取锁就会失败，也就是同一时间该流程只能有一个能执行成功，执行完成后，释放分布式锁(分布式锁要第三方系统提供) </p>
<ol>
<li><p>select + insert<br>并发不高的后台系统，或者一些任务JOB，为了支持幂等，支持重复执行，简单的处理方法是，先查询下一些关键数据，判断是否已经执行过，在进行业务处理，就可以了<br>注意：核心高并发流程不要用这种方法 </p>
</li>
<li><p>状态机幂等<br>在设计单据相关的业务，或者是任务相关的业务，肯定会涉及到状态机(状态变更图)，就是业务单据上面有个状态，状态在不同的情况下会发生变更，一般情况下存在有限状态机，这时候，如果状态机已经处于下一个状态，这时候来了一个上一个状态的变更，理论上是不能够变更的，这样的话，保证了有限状态机的幂等。 </p>
</li>
</ol>
<p>注意：订单等单据类业务，存在很长的状态流转，一定要深刻理解状态机，对业务系统设计能力提高有很大帮助 </p>
<ol>
<li>对外提供接口的api如何保证幂等<br>如银联提供的付款接口：需要接入商户提交付款请求时附带：source来源，seq序列号<br>source+seq在数据库里面做唯一索引，防止多次付款，(并发时，只能处理一个请求) </li>
</ol>
<p>重点：<br>对外提供接口为了支持幂等调用，接口有两个字段必须传，一个是来源source，一个是来源方序列号seq，这个两个字段在提供方系统里面做联合唯一索引，这样当第三方调用时，先在本方系统里面查询一下，是否已经处理过，返回相应处理结果；没有处理过，进行相应处理，返回结果。注意，为了幂等友好，一定要先查询一下，是否处理过该笔业务，不查询直接插入业务系统，会报错，但实际已经处理了。 </p>
<p>总结：<br>幂等性应该是合格程序员的一个基因，在设计系统时，是首要考虑的问题，尤其是在像支付宝，银行，互联网金融公司等涉及的都是钱的系统，既要高效，数据也要准确，所以不能出现多扣款，多打款等问题，这样会很难处理，用户体验也不好 </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;高并发的核心技术-幂等的实现方案&quot;&gt;&lt;a href=&quot;#高并发的核心技术-幂等的实现方案&quot; class=&quot;headerlink&quot; title=&quot;高并发的核心技术-幂等的实现方案&quot;&gt;&lt;/a&gt;高并发的核心技术-幂等的实现方案&lt;/h3&gt;&lt;p&gt;一、背景&lt;br&gt;我们实际系统中有很多操作，是不管做多少次，都应该产生一样的效果或返回一样的结果。&lt;br&gt;例如： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前端重复提交选中的数据，应该后台只产生对应这个数据的一个反应结果。 &lt;/li&gt;
&lt;li&gt;我们发起一笔付款请求，应该只扣用户账户一次钱，当遇到网络重发或系统bug重发，也应该只扣一次钱； &lt;/li&gt;
&lt;li&gt;发送消息，也应该只发一次，同样的短信发给用户，用户会哭的； &lt;/li&gt;
&lt;li&gt;创建业务订单，一次业务请求只能创建一个，创建多个就会出大问题。 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;等等很多重要的情况，这些逻辑都需要幂等的特性来支持。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="高并发" scheme="http://blog.vrzart.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>初级面试必备教程</title>
    <link href="http://blog.vrzart.com/2017/05/26/%E9%9D%A2%E8%AF%95%E5%A4%A7%E5%85%A8/"/>
    <id>http://blog.vrzart.com/2017/05/26/面试大全/</id>
    <published>2017-05-26T11:14:31.067Z</published>
    <updated>2018-01-15T09:55:56.636Z</updated>
    
    <content type="html"><![CDATA[<p>## </p>
<p>##一、初级面试必备</p>
<p>####（1）基础部分    </p>
<ul>
<li>1、Hmac加密算法</li>
</ul>
<p>user_info表被锁住，有哪些数据库操作会锁表，因为只有update、delete这些操作会锁表，所以打算整改这些语句，有子查询的全部整改</p>
<a id="more"></a>
<ul>
<li>日志表数据过大，查询起来比较慢，你如何处理（分表？归档？solr ? 分次查询）</li>
<li>ConcurrentMap<thread, object="">来保存多线程里面对象</thread,></li>
<li>如何验证bean参数是否为空（Bean Validation配置框架，拦截器）</li>
<li>排序中最快的是什么 ，快排原理</li>
<li>Struts利用同步令牌(Token)的方式来解决Web应用中重复提交的问题,如果公司用的springMVC而不是struts你如何解决这个问题呢？（在springmvc配置文件中加入拦截器的配置，拦截两类请求，一类是到页面的，一类是提交表单的。当转到页面的请求到来时，生成token的名字和token值，一份放到redis缓存中，一份放传给页面表单的隐藏域）</li>
</ul>
<h4 id="基础与框架："><a href="#基础与框架：" class="headerlink" title="基础与框架："></a>基础与框架：</h4><ul>
<li>String类能被继承吗，为什么</li>
<li>String，Stringbuffer，StringBuilder的区别？</li>
<li>ArrayList和LinkedList有什么区别</li>
<li>类的实例化顺序，比如父类静态数据，构造函数，字段，子类静态数据，构造函数，字段，他们的执行顺序</li>
<li>用过哪些Map，都有什么区别，HashMap是线程安全的吗,并发下使用的Map是什么，他们内部原理分别是什么，比如hashcode，扩容等</li>
<li>HashMap为什么get和set那么快，concurrentHashMap为什么能提高并发</li>
<li>抽象类和接口的区别，类可以继承多个类么，接口可以继承多个接口么,类可以实现多个接口么</li>
<li>什么情况下会发生栈内存溢出</li>
<li>什么是nio，原理</li>
<li>反射中，Class.forName和ClassLoader区别</li>
<li>tomcat结构，类加载器流程</li>
<li>讲讲Spring事务的传播属性,AOP原理，动态代理与cglib实现的区别，AOP有哪几种实现方式</li>
<li>Spring的beanFactory和factoryBean的区别</li>
<li>Spring加载流程-</li>
<li>Spring如何管理事务的</li>
</ul>
<p>####多线程：<br>线城池的最大线程数目根据什么确定<br>多线程的几种实现方式，什么是线程安全，什么是重排序<br>volatile的原理，作用，能代替锁么<br>sleep和wait的区别，以及wait的实现原理<br>Lock与synchronized 的区别，synchronized 的原理，什么是自旋锁，偏向锁，轻量级锁，什么叫可重入锁，什么叫公平锁和非公平锁<br>用过哪些原子类，他们的参数以及原理是什么<br>用过哪些线程池，他们的原理简单概括下，构造函数的各个参数的含义，比如coreSize，maxsize等<br>有一个第三方接口，有很多个线程去调用获取数据，现在规定每秒钟最多有10个线程同时调用它，如何做到。<br>spring的controller是单例还是多例，怎么保证并发的安全<br>用三个线程按顺序循环打印abc三个字母，比如abcabcabc<br>ThreadLocal用过么，原理是什么，用的时候要注意什么<br>如果让你实现一个并发安全的链表，你会怎么做</p>
<p>####JVM相关：<br>jvm中一次完整的GC流程（从ygc到fgc）是怎样的，重点讲讲对象如何晋升到老年代，几种主要的jvm参数等<br>你知道哪几种垃圾收集器，各自的优缺点，重点讲下cms<br>当出现了内存溢出，你怎么排错<br>JVM内存模型的相关知识了解多少<br>简单说说你了解的类加载器<br>JAVA的反射机制</p>
<p>####网络：<br>http1.0和http1.1有什么区别<br>TCP三次握手和四次挥手的流程，为什么断开连接要4次,如果握手只有两次，会出现什么<br>TIME_WAIT和CLOSE_WAIT的区别<br>说说你知道的几种HTTP响应码<br>当你用浏览器打开一个链接的时候，计算机做了哪些工作步骤<br>Linux下IO模型有几种，各自的含义是什么<br>TCP/IP如何保证可靠性，数据包有哪些数据组成</p>
<p>####架构设计与分布式：<br>tomcat如何调优，各种参数的意义<br>常见的缓存策略有哪些，你们项目中用到了什么缓存系统，如何设计的，Redis的使用要注意什么，持久化方式，内存设置，集群等<br>用java自己实现一个LRU<br>分布式集群下如何做到唯一序列号<br>设计一个秒杀系统，30分钟没付款就自动关闭交易<br>如何做一个分布式锁<br>用过哪些MQ，怎么用的，和其他mq比较有什么优缺点，MQ的连接是线程安全的吗<br>MQ系统的数据如何保证不丢失<br>分布式事务的原理，如何使用分布式事务<br>什么是一致性hash<br>什么是restful，讲讲你理解的restful<br>如何设计建立和保持100w的长连接？<br>解释什么是MESI协议(缓存一致性)<br>说说你知道的几种HASH算法，简单的也可以<br>什么是paxos算法<br>redis和memcached 的内存管理的区别<br>一个在线文档系统，文档可以被编辑，如何防止多人同时对同一份文档进行编辑更新</p>
<p>####算法：<br>10亿个数字里里面找最小的10个<br>有1亿个数字，其中有2个是重复的，快速找到它，时间和空间要最优<br>2亿个随机生成的无序整数,找出中间大小的值<br>遍历二叉树</p>
<p>####数据库：<br>数据库隔离级别有哪些，各自的含义是什么，MYsql默认的隔离级别是是什么，各个存储引擎优缺点<br>高并发下，如何做到安全的修改同一行数据，乐观锁和悲观锁是什么，INNODB的行级锁有哪2种，解释其含义<br>SQL优化的一般步骤是什么，怎么看执行计划，如何理解其中各个字段的含义，索引的原理？<br>数据库会死锁吗，举一个死锁的例子，mysql怎么解决死锁<br>MYsql的索引实现方式<br>聚集索引和非聚集索引的区别<br>数据库中 BTREE和B+tree区别</p>
<p>####J2SE基础</p>
<ol>
<li><p>九种基本数据类型的大小，以及他们的封装类。</p>
</li>
<li><p>Switch能否用string做参数？</p>
</li>
<li><p>equals与==的区别。</p>
</li>
<li><p>Object有哪些公用方法？</p>
</li>
<li><p>Java的四种引用，强弱软虚，用到的场景。</p>
</li>
<li><p>Hashcode的作用。</p>
</li>
<li><p>ArrayList、LinkedList、Vector的区别。</p>
</li>
<li><p>String、StringBuffer与StringBuilder的区别。</p>
</li>
<li><p>Map、Set、List、Queue、Stack的特点与用法。</p>
</li>
<li><p>HashMap和HashTable的区别。</p>
</li>
<li><p>HashMap和ConcurrentHashMap的区别，HashMap的底层源码。</p>
</li>
<li><p>TreeMap、HashMap、LindedHashMap的区别。</p>
</li>
<li><p>Collection包结构，与Collections的区别。</p>
</li>
<li><p>try catch finally，try里有return，finally还执行么？</p>
</li>
<li><p>Excption与Error包结构。OOM你遇到过哪些情况，SOF你遇到过哪些情况。</p>
</li>
<li><p>Java面向对象的三个特征与含义。</p>
</li>
<li><p>Override和Overload的含义去区别。</p>
</li>
<li><p>Interface与abstract类的区别。</p>
</li>
<li><p>Static class 与non static class的区别。</p>
</li>
<li><p>java多态的实现原理。</p>
</li>
<li><p>实现多线程的两种方法：Thread与Runable。</p>
</li>
<li><p>线程同步的方法：sychronized、lock、reentrantLock等。</p>
</li>
<li><p>锁的等级：方法锁、对象锁、类锁。</p>
</li>
<li><p>写出生产者消费者模式。</p>
</li>
<li><p>ThreadLocal的设计理念与作用。</p>
</li>
<li><p>ThreadPool用法与优势。</p>
</li>
<li><p>Concurrent包里的其他东西：ArrayBlockingQueue、CountDownLatch等等。</p>
</li>
<li><p>wait()和sleep()的区别。</p>
</li>
<li><p>foreach与正常for循环效率对比。</p>
</li>
<li><p>Java IO与NIO。</p>
</li>
<li><p>反射的作用于原理。</p>
</li>
<li><p>泛型常用特点，List<string>能否转为List<object>。</object></string></p>
</li>
<li><p>解析XML的几种方式的原理与特点：DOM、SAX、PULL。</p>
</li>
<li><p>Java与C++对比。</p>
</li>
<li><p>Java1.7与1.8新特性。</p>
</li>
<li><p>设计模式：单例、工厂、适配器、责任链、观察者等等。</p>
</li>
<li><p>JNI的使用。</p>
</li>
</ol>
<p>JVM</p>
<ol>
<li>内存模型以及分区，需要详细到每个区放什么。</li>
<li>堆里面的分区：Eden，survival from to，老年代，各自的特点。</li>
<li>对象创建方法，对象的内存分配，对象的访问定位。</li>
<li>GC的两种判定方法：引用计数与引用链。</li>
<li>GC的三种收集方法：标记清除、标记整理、复制算法的原理与特点，分别用在什么地方，如果让你优化收集方法，有什么思路？</li>
<li>GC收集器有哪些？CMS收集器与G1收集器的特点。</li>
<li>Minor GC与Full GC分别在什么时候发生？</li>
<li>几种常用的内存调试工具：jmap、jstack、jconsole。</li>
<li>类加载的五个过程：加载、验证、准备、解析、初始化。</li>
<li>双亲委派模型：Bootstrap ClassLoader、Extension ClassLoader、ApplicationClassLoader。</li>
<li>分派：静态分派与动态分派。</li>
</ol>
<p>##操作系统</p>
<ol>
<li><p>进程和线程的区别。</p>
</li>
<li><p>死锁的必要条件，怎么处理死锁。</p>
</li>
<li><p>Window内存管理方式：段存储，页存储，段页存储。</p>
</li>
<li><p>进程的几种状态。</p>
</li>
<li><p>IPC几种通信方式。</p>
</li>
<li><p>什么是虚拟内存。</p>
</li>
<li><p>虚拟地址、逻辑地址、线性地址、物理地址的区别。</p>
</li>
</ol>
<p>##Tcp/IP</p>
<ol>
<li><p>OSI与TCP/IP各层的结构与功能，都有哪些协议。</p>
</li>
<li><p>TCP与UDP的区别。</p>
</li>
<li><p>TCP报文结构。</p>
</li>
<li><p>TCP的三次握手与四次挥手过程，各个状态名称与含义，TIMEWAIT的作用。</p>
</li>
<li><p>TCP拥塞控制。</p>
</li>
<li><p>TCP滑动窗口与回退N针协议。</p>
</li>
<li><p>Http的报文结构。</p>
</li>
<li><p>Http的状态码含义。</p>
</li>
<li><p>Http request的几种类型。</p>
</li>
<li><p>Http1.1和Http1.0的区别</p>
</li>
<li><p>Http怎么处理长连接。</p>
</li>
<li><p>Cookie与Session的作用于原理。</p>
</li>
<li><p>电脑上访问一个网页，整个过程是怎么样的：DNS、HTTP、TCP、OSPF、IP、ARP。</p>
</li>
<li><p>Ping的整个过程。ICMP报文是什么。</p>
</li>
<li><p>C/S模式下使用socket通信，几个关键函数。</p>
</li>
<li><p>IP地址分类。</p>
</li>
<li><p>路由器与交换机区别。</p>
</li>
</ol>
<p>##数据结构与算法</p>
<ol>
<li><p>链表与数组。</p>
</li>
<li><p>队列和栈，出栈与入栈。</p>
</li>
<li><p>链表的删除、插入、反向。</p>
</li>
<li><p>字符串操作。</p>
</li>
<li><p>Hash表的hash函数，冲突解决方法有哪些。</p>
</li>
<li><p>各种排序：冒泡、选择、插入、希尔、归并、快排、堆排、桶排、基数的原理、平均时间复杂度、最坏时间复杂度、空间复杂度、是否稳定。</p>
</li>
<li><p>快排的partition函数与归并的Merge函数。</p>
</li>
<li><p>对冒泡与快排的改进。</p>
</li>
<li><p>二分查找，与变种二分查找。</p>
</li>
<li><p>二叉树、B+树、AVL树、红黑树、哈夫曼树。</p>
</li>
<li><p>二叉树的前中后续遍历：递归与非递归写法，层序遍历算法。</p>
</li>
<li><p>图的BFS与DFS算法，最小生成树prim算法与最短路径Dijkstra算法。</p>
</li>
<li><p>KMP算法。</p>
</li>
<li><p>排列组合问题。</p>
</li>
<li><p>动态规划、贪心算法、分治算法。（一般不会问到）</p>
</li>
<li><p>大数据处理：类似10亿条数据找出最大的1000个数………等等   </p>
</li>
</ol>
<p>###GC<br>1、什么时候开始GC:<br>当新生代满了会进行Minor GC，升到老年代的对象大于老年代剩余空间时会进行Major GC<br>2、GC做什么<br>新生代采用复制算法，老年代采用标记-清除或标记-整理算法  </p>
<p>3、线程安全的HashMap  </p>
<p>HashMap，Hashtable，ConcurrentHashMap和synchronized Map的原理和区别。当时有些紧张只是简单说了下HashMap不是线程安全的；Hashtable线程安全，但效率低，因为是Hashtable是使用synchronized的，所有线程竞争同一把锁；而ConcurrentHashMap不仅线程安全而且效率高，因为它包含一个segment数组，将数据分段存储，给每一段数据配一把锁，也就是所谓的锁分段技术。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;## &lt;/p&gt;
&lt;p&gt;##一、初级面试必备&lt;/p&gt;
&lt;p&gt;####（1）基础部分    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、Hmac加密算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;user_info表被锁住，有哪些数据库操作会锁表，因为只有update、delete这些操作会锁表，所以打算整改这些语句，有子查询的全部整改&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试准备" scheme="http://blog.vrzart.com/tags/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>自己收集的面试题</title>
    <link href="http://blog.vrzart.com/2017/05/26/%E8%87%AA%E5%B7%B1%E6%94%B6%E9%9B%86%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://blog.vrzart.com/2017/05/26/自己收集的面试题/</id>
    <published>2017-05-26T11:14:31.064Z</published>
    <updated>2017-11-23T07:16:00.609Z</updated>
    
    <content type="html"><![CDATA[<p>1、描述一下你最近的的一个项目架构</p>
<p>资金平台平台重构+后台对账业务？</p>
<p>如何快速接入银行、怎么保证可扩展性</p>
<p>针对银行接口的变化有哪些考虑</p>
<p>怎么考虑调单情况？</p>
<p>2、描述一下http请求到服务器返回发生了哪些过程</p>
<p>3、数据库死锁？线上怎么定位？怎么解决</p>
<p>4、为什么mysql中主键要自增？</p>
<p>5、你了解哪些sql优化</p>
<a id="more"></a>
<p>6、联合索引？where c=x and b=x and a=x是否还会用到索引，where c=x  and b&gt;x and a=x是否还会用到索引</p>
<p>7、b树是什么</p>
<p>8、线上如何利用jvm命令排查问题</p>
<p>9、java线程池常用参数及如何进行设置?</p>
<p>10、AQS锁机制</p>
<p>11、讲一讲你最近印象比较深刻的一件事情</p>
<p>​        在进行放款匹配债权的时候，总是出问题，后台我就打了很多日志，发现是在生成债权协议的时候，文件平凡读写导致执行超时，后来把它单列了一个计划任务</p>
<h3 id="多线程类别"><a href="#多线程类别" class="headerlink" title="多线程类别"></a>多线程类别</h3><p>1、线城池的最大线程数目根据什么确定<br>2、多线程的几种实现方式，什么是线程安全，什么是重排序<br>3、volatile的原理，作用，能代替锁么<br>4、sleep和wait的区别，以及wait的实现原理<br>5、Lock与synchronized 的区别，synchronized 的原理，什么是自旋锁，偏向锁，轻量级锁，什么叫可重入锁，什么叫公平锁和非公平锁<br>6、用过哪些原子类，他们的参数以及原理是什么<br>7、用过哪些线程池，他们的原理简单概括下，构造函数的各个参数的含义，比如coreSize，maxsize等<br>8、有一个第三方接口，有很多个线程去调用获取数据，现在规定每秒钟最多有10个线程同时调用它，如何做到。<br>9、spring的controller是单例还是多例，怎么保证并发的安全<br>10、用三个线程按顺序循环打印abc三个字母，比如abcabcabc<br>12、ThreadLocal用过么，原理是什么，用的时候要注意些什么</p>
<p>13、jvm中一次完整的GC流程（从ygc到fgc）是怎样的，重点讲讲对象如何晋升到老年代，几种主要的jvm参数等</p>
<p>14、你知道哪几种垃圾收集器，各自的优缺点，重点讲下cms<br>15、当出现了内存溢出，你怎么排错<br>16、JVM内存模型的相关知识了解多少<br>17、简单说说你了解的类加载器<br>18、JAVA的反射机制</p>
<p><strong>当变量的值由自身的上一个决定时，如n=n+1、n++等，volatile关键字将失效，只有当变量的值和自身上一个值无关时对该变量的操作才是原子级别的，如n = m + 1，这个就是原级别的。所以在使用volatile关键时一定要谨慎，如果自己没有把握，可以使用synchronized来代替volatile。</strong></p>
<p>JVM虚拟机的垃圾回收算法<br>偏向锁 自旋锁<br>数据库同步方案 binlog<br>怎么理解原子性和可见性<br>SQL 调优策略 索引相关实现和向左原则<br>Kafka设计原理<br>Kafka 内部 偏移量如何同步（例如A机器 offset100 B机器 95 C机器98） ISR协议？<br>服务化治理<br>如何设计高可用系统，从业务的角度出发呢，例如降级<br>Java容器 如何做容错的？ 例如HashMap 或者List 容器 在删除数据的时候，如何避免出错<br>如何监控线上系统问题<br>— CPU 100%<br>— 内存溢出<br>如何排查线上系统性能问题，MySQL 慢查询</p>
<p>作者：六月星空2011<br>链接：<a href="http://www.jianshu.com/p/12bc20763fc9" target="_blank" rel="external">http://www.jianshu.com/p/12bc20763fc9</a><br>來源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、描述一下你最近的的一个项目架构&lt;/p&gt;
&lt;p&gt;资金平台平台重构+后台对账业务？&lt;/p&gt;
&lt;p&gt;如何快速接入银行、怎么保证可扩展性&lt;/p&gt;
&lt;p&gt;针对银行接口的变化有哪些考虑&lt;/p&gt;
&lt;p&gt;怎么考虑调单情况？&lt;/p&gt;
&lt;p&gt;2、描述一下http请求到服务器返回发生了哪些过程&lt;/p&gt;
&lt;p&gt;3、数据库死锁？线上怎么定位？怎么解决&lt;/p&gt;
&lt;p&gt;4、为什么mysql中主键要自增？&lt;/p&gt;
&lt;p&gt;5、你了解哪些sql优化&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试题" scheme="http://blog.vrzart.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>自定义注解</title>
    <link href="http://blog.vrzart.com/2017/05/26/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/"/>
    <id>http://blog.vrzart.com/2017/05/26/自定义注解/</id>
    <published>2017-05-26T11:14:31.060Z</published>
    <updated>2017-01-10T11:23:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>1、先上代码（定义注解）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Constraint</span>(validatedBy = DecimalValidator.class) <span class="comment">//具体的实现</span></div><div class="line"><span class="meta">@Target</span>( &#123; java.lang.annotation.ElementType.METHOD,</div><div class="line">    java.lang.annotation.ElementType.FIELD &#125;)</div><div class="line"><span class="meta">@Retention</span>(java.lang.annotation.RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> IsDecimal &#123;</div><div class="line">	java.lang.<span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">	Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">	Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>2、实现代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecimalValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">IsDecimal</span>, <span class="title">Map</span>&lt;<span class="title">String</span>,<span class="title">Object</span>&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line">	String pointPrefix = <span class="string">"(\\-|\\+)&#123;0,1&#125;\\d*\\.\\d+"</span>;<span class="comment">// 浮点数的正则表达式-小数点在中间与前面</span></div><div class="line">	String pointSuffix = <span class="string">"(\\-|\\+)&#123;0,1&#125;\\d+\\."</span>;<span class="comment">// 浮点数的正则表达式-小数点在后面</span></div><div class="line">	String pointPrefixWithoutPoint = <span class="string">"\\-&#123;0,1&#125;\\d+"</span>;<span class="comment">// 整数的正则表达式</span></div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(IsDecimal constraintAnnotation)</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(Map&lt;String,Object&gt; map, ConstraintValidatorContext arg1)</span> </span>&#123;</div><div class="line">		String value = (String)map.get(Constants.KEY);</div><div class="line">		<span class="keyword">if</span> (StringUtils.isEmpty(value) &amp;&amp; (<span class="keyword">boolean</span>)(map.get(Constants.REQUIRED)))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> value.matches(pointPrefix) || value.matches(pointSuffix) || value.matches(pointPrefixWithoutPoint);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>1、</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、先上代码（定义注解）&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Constraint&lt;/span&gt;(validatedBy = DecimalValidator.class) &lt;span class=&quot;comment&quot;&gt;//具体的实现&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Target&lt;/span&gt;( &amp;#123; java.lang.annotation.ElementType.METHOD,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    java.lang.annotation.ElementType.FIELD &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Retention&lt;/span&gt;(java.lang.annotation.RetentionPolicy.RUNTIME)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Documented&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@interface&lt;/span&gt; IsDecimal &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	java.lang.&lt;span class=&quot;function&quot;&gt;String &lt;span class=&quot;title&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &quot;&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Class&amp;lt;?&amp;gt;[] groups() &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Class&amp;lt;? extends Payload&amp;gt;[] payload() &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="spring" scheme="http://blog.vrzart.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>耳鸣疗法</title>
    <link href="http://blog.vrzart.com/2017/05/26/%E8%80%B3%E9%B8%A3%E7%96%97%E6%B3%95/"/>
    <id>http://blog.vrzart.com/2017/05/26/耳鸣疗法/</id>
    <published>2017-05-26T11:14:31.056Z</published>
    <updated>2017-01-13T07:30:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>（1）梳头抹耳法：双手十指由前发际向后梳头，梳到头后部时，两掌心贴住耳廓后部，两手分别向左右两侧抹耳廓至面颊部为1次，连续108次。</p>
<p>（2）鸣天鼓法：两掌搓热，用两掌心分别贴住左右两耳，手指托住后脑部，食指压在中指上，使食指从中指上重重地滑落，经此弹击后颈发际处，可听到“咚咚”之声，如击天鼓，共击108次。</p>
<p>（3）掌心震耳（自行鼓膜按摩法）：两手掌搓热，用搓热的两手掌心捂住两耳．手掌与耳朵完全封闭，然后两掌突然松开，听到“叭”的一声，起到震耳的作用。共108次。</p>
<a id="more"></a>
<p>（4）过顶提耳：先右臂弯曲过头顶，用右手拇指、食指和中指捏住左耳耳尖向上提拉，拉108次。再换左手提拉右耳，也拉108次。此动作对<a href="http://www.haodf.com/jibing/jianzhouyan.htm" target="_blank" rel="external">肩周炎</a>也有防治作用。</p>
<p>（5）双手拉耳：双手握空拳，用拇指、食指捏住耳垂向下拉。拇指在后，食指弯曲在前，共拉1O8次。然后两手的食指、中指叉开，中指在前，食指在后搓耳根．一上一下为1次，共搓108次。</p>
<p>（6）用食指或大拇指轻柔按揉听会穴(耳屏间切迹的前方，下颌骨髁突的后缘，张口有凹陷处)5分钟左右。</p>
<p>（7）用食指和大拇指，先从上至下按捏耳廓，然后从下至上按捏，这样反复按捏至双耳有<a href="http://www.haodf.com/jibing/fashao.htm" target="_blank" rel="external">发热</a>感，共按捏耳廓100次。</p>
<p>（8）按摩合谷穴(一手的拇指第一个关节横纹正对另一手的虎口边．拇指屈曲按下，指尖所指处)80次。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;（1）梳头抹耳法：双手十指由前发际向后梳头，梳到头后部时，两掌心贴住耳廓后部，两手分别向左右两侧抹耳廓至面颊部为1次，连续108次。&lt;/p&gt;
&lt;p&gt;（2）鸣天鼓法：两掌搓热，用两掌心分别贴住左右两耳，手指托住后脑部，食指压在中指上，使食指从中指上重重地滑落，经此弹击后颈发际处，可听到“咚咚”之声，如击天鼓，共击108次。&lt;/p&gt;
&lt;p&gt;（3）掌心震耳（自行鼓膜按摩法）：两手掌搓热，用搓热的两手掌心捂住两耳．手掌与耳朵完全封闭，然后两掌突然松开，听到“叭”的一声，起到震耳的作用。共108次。&lt;/p&gt;
    
    </summary>
    
    
      <category term="生活" scheme="http://blog.vrzart.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>搭建SS服务器教程</title>
    <link href="http://blog.vrzart.com/2017/05/26/%E6%90%AD%E5%BB%BASS%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://blog.vrzart.com/2017/05/26/搭建SS服务器教程/</id>
    <published>2017-05-26T11:14:31.053Z</published>
    <updated>2017-01-11T04:49:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h2><p>首先我们下载脚本</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate</div><div class="line">https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</div></pre></td></tr></table></figure>
<p>更改权限</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x shadowsocks.sh</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>执行脚本</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</div></pre></td></tr></table></figure>
<p>添加多用户：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi/ etc/shadowsocks.json</div></pre></td></tr></table></figure>
<p>本来是这样的</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"> "server":"0.0.0.0",</div><div class="line"> "server_port":8989,</div><div class="line"> "local_address":"127.0.0.1",</div><div class="line"> "local_port":1080,</div><div class="line"> "password":"yourpassword",</div><div class="line"> "timeout":300,</div><div class="line"> "method":"aes-256-cfb",</div><div class="line"> "fast_open": false</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>改为这样的，其实就是添加端口</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"> "server":"0.0.0.0",</div><div class="line"> "local_address":"127.0.0.1",</div><div class="line"> "local_port":1080,</div><div class="line"> "port_password":&#123;</div><div class="line"> "8989":"password0",</div><div class="line"> "9001":"password1",</div><div class="line"> "9002":"password2",</div><div class="line"> "9003":"password3",</div><div class="line"> "9004":"password4" //几个用户就加几个，最后一个用户冒号后面不要逗号，不然会报错</div><div class="line"> &#125;,</div><div class="line"> "timeout":300,</div><div class="line"> "method":"aes-256-cfb",</div><div class="line"> "fast_open": false</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后重启一下服务就好了</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/shadowsocks restart</div></pre></td></tr></table></figure>
<p>发现还是不能使用</p>
<p>centos7继续往下面看</p>
<p>先进入firewalled的配置端口目录，路径为etc/firewalled/zones/。打开public.xml文件进行端口的编辑。例如加入8080端口的tcp和ump</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> &lt;port protocol="tcp" port="8080"/&gt;   </div><div class="line"> &lt;port protocol="udp" port="8080"/&gt;</div></pre></td></tr></table></figure>
<p>重启防火墙</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart firewalld.service</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装脚本&quot;&gt;&lt;a href=&quot;#安装脚本&quot; class=&quot;headerlink&quot; title=&quot;安装脚本&quot;&gt;&lt;/a&gt;安装脚本&lt;/h2&gt;&lt;p&gt;首先我们下载脚本&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wget --no-check-certificate&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更改权限&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;chmod +x shadowsocks.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="服务器" scheme="http://blog.vrzart.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>如何利用apidoc编写rest风格的文档</title>
    <link href="http://blog.vrzart.com/2017/05/26/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8apidoc%E7%BC%96%E5%86%99rest%E9%A3%8E%E6%A0%BC%E7%9A%84%E6%96%87%E6%A1%A3/"/>
    <id>http://blog.vrzart.com/2017/05/26/如何使用apidoc编写rest风格的文档/</id>
    <published>2017-05-26T11:14:31.030Z</published>
    <updated>2017-01-13T01:55:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、ApiDoc是什么"><a href="#一、ApiDoc是什么" class="headerlink" title="一、ApiDoc是什么"></a>一、ApiDoc是什么</h3><p>事实上我们大多时候说的apidoc实际上是apidoc.js，是使用nodejs命令行模块来生成文档的</p>
<p><img src="https://blog.jscrambler.com/content/images/2016/12/site-apidocjs.png" alt=""></p>
<a id="more"></a>
<p>首先你需要安装nodejs，mac上直接使用brew安装很简单,执行下面命令即可</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install node</div></pre></td></tr></table></figure>
<h3 id="二、安装ApiDoc"><a href="#二、安装ApiDoc" class="headerlink" title="二、安装ApiDoc"></a>二、安装ApiDoc</h3><p>然后安装apidoc吧</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install apidoc -g</div></pre></td></tr></table></figure>
<h3 id="三、生成API"><a href="#三、生成API" class="headerlink" title="三、生成API"></a>三、生成API</h3><p>首先，我们创建一个task-api目录来初始化目录</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir task-api</div><div class="line">cd task-api</div><div class="line">npm init</div></pre></td></tr></table></figure>
<p>执行npm init之后就会让你填写很多信息，name，version，main，repository，keywords，author，懂的就填写一下，不懂的直接回车,系统会帮你创建一个package.json文件。</p>
<p>为了建立我们的api代码，我们创建一个index.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);  </div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line"><span class="comment">// 为了public文件夹服务</span></div><div class="line">app.use(express.static(<span class="string">'public'</span>));</div><div class="line"></div><div class="line">app.get(<span class="string">'/tasks'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;  </div><div class="line">    <span class="comment">// business logic for list all tasks...</span></div><div class="line">&#125;);</div><div class="line">app.get(<span class="string">'/tasks/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;  </div><div class="line">    <span class="comment">// business logic for find a task...</span></div><div class="line">&#125;);</div><div class="line">app.post(<span class="string">'/tasks'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;  </div><div class="line">    <span class="comment">// business logic for create a task...</span></div><div class="line">&#125;);</div><div class="line">app.put(<span class="string">'/tasks/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;  </div><div class="line">    <span class="comment">// business logic for update a task...</span></div><div class="line">&#125;);</div><div class="line">app.delete(<span class="string">'/tasks/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;  </div><div class="line">    <span class="comment">// business logic for delete a task...</span></div><div class="line">&#125;);</div><div class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Task api up and running...'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这行代码<code>app.use(express.static(&#39;public&#39;))</code>将启用public文件夹的静态服务，这个目录将成所有的文档文件。</p>
<h3 id="四、API路由"><a href="#四、API路由" class="headerlink" title="四、API路由"></a>四、API路由</h3><p>OK，准备完毕，我们可以开始写我们的api了，我们需要使用apidoc提供的一些简单参数</p>
<p>然后你需要创建一个apidoc.json文件，在根目录，包括这些参数，也可以直接把apidoc这些属性直接放到上面package.json目录下。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    "name": "Task API documentation",//文档名称</div><div class="line">    "version": "1.0.0",//文档版本号</div><div class="line">    "description": "API task list manager",//文档描述</div><div class="line">    "template": &#123;</div><div class="line">        "forceLanguage": "en"//语言</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置template下面的forceLanguage可以屏蔽浏览器的语言检测，强制使用英语</p>
<p>有这些参数可以设置：</p>
<ul>
<li>name：项目名称 </li>
<li>version：项目版本 </li>
<li>description：项目介绍 </li>
<li>title：浏览器显示的标题内容 </li>
<li>url：endpoints的前缀，例如<a href="https://api.github.com/v1" target="_blank" rel="external">https://api.github.com/v1</a> </li>
<li>sampleUrl：如果设置了，则在api文档中出现一个<a href="http://lib.csdn.net/base/softwaretest" target="_blank" rel="external">测试</a>用的from表单 </li>
<li>header </li>
<li>title：导航文字包含header.md文件 </li>
<li>filename：markdown-file 文件名 </li>
<li>footer </li>
<li>title：导航文字包含header.md文件 </li>
<li>filename：markdown-file 文件名 </li>
<li>order：用于配置输出 api-names/group-names 排序，在列表中的将按照列表中的顺序排序，不在列表中的名称将自动显示。</li>
</ul>
<hr>
<p>OK，下面我们开始文档的编写。</p>
<p>编辑index.js，首先我们在<code>app.get(&#39;/tasks&#39;)</code>方法上面编辑，我们可以加入下面这些参数</p>
<ul>
<li><code>@api</code>: http方法 、地址和方法名称;</li>
<li><code>@apiGroup</code>: 属于哪一个路由组;</li>
<li><code>@apiSuccess</code>: 描述成功返回</li>
<li><code>@apiSuccessExample</code>: 展示返回值</li>
<li><code>@apiErrorExample</code>: 展示失败值</li>
</ul>
<p>直接看下代码吧。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @api &#123;get&#125; /tasks 展示所有的任务</div><div class="line"> * @apiGroup Tasks   //属于task组</div><div class="line"> * @apiSuccess &#123;Object[]&#125; tasks Task's list</div><div class="line"> * @apiSuccess &#123;Number&#125; tasks.id Task id</div><div class="line"> * @apiSuccess &#123;String&#125; tasks.title Task title</div><div class="line"> * @apiSuccess &#123;Boolean&#125; tasks.done Task is done?</div><div class="line"> * @apiSuccess &#123;Date&#125; tasks.updated_at Update's date</div><div class="line"> * @apiSuccess &#123;Date&#125; tasks.created_at Register's date</div><div class="line"> * @apiSuccessExample &#123;json&#125; Success</div><div class="line"> *    HTTP/1.1 200 OK</div><div class="line"> *    [&#123;</div><div class="line"> *      "id": 1,</div><div class="line"> *      "title": "Study",</div><div class="line"> *      "done": false</div><div class="line"> *      "updated_at": "2016-02-10T15:46:51.778Z",</div><div class="line"> *      "created_at": "2016-02-10T15:46:51.778Z"</div><div class="line"> *    &#125;]</div><div class="line"> * @apiErrorExample &#123;json&#125; List error</div><div class="line"> *    HTTP/1.1 500 Internal Server Error</div><div class="line"> */</div><div class="line">app.get(<span class="string">'/tasks'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;  </div><div class="line">    <span class="comment">// business logic for listing all tasks...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>下一个路由路径、我们加入了一个新的参数</p>
<ul>
<li><code>@apiParam</code>: 描述路径下的参数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @api &#123;get&#125; /tasks/:id Find a task</div><div class="line"> * @apiGroup Tasks</div><div class="line"> * @apiParam &#123;id&#125; id Task id</div><div class="line"> * @apiSuccess &#123;Number&#125; id Task id</div><div class="line"> * @apiSuccess &#123;String&#125; title Task title</div><div class="line"> * @apiSuccess &#123;Boolean&#125; done Task is done?</div><div class="line"> * @apiSuccess &#123;Date&#125; updated_at Update's date</div><div class="line"> * @apiSuccess &#123;Date&#125; created_at Register's date</div><div class="line"> * @apiSuccessExample &#123;json&#125; Success</div><div class="line"> *    HTTP/1.1 200 OK</div><div class="line"> *    &#123;</div><div class="line"> *      "id": 1,</div><div class="line"> *      "title": "Study",</div><div class="line"> *      "done": false</div><div class="line"> *      "updated_at": "2016-02-10T15:46:51.778Z",</div><div class="line"> *      "created_at": "2016-02-10T15:46:51.778Z"</div><div class="line"> *    &#125;</div><div class="line"> * @apiErrorExample &#123;json&#125; Task not found</div><div class="line"> *    HTTP/1.1 404 Not Found</div><div class="line"> * @apiErrorExample &#123;json&#125; Find error</div><div class="line"> *    HTTP/1.1 500 Internal Server Error</div><div class="line"> */</div><div class="line">app.get(<span class="string">'/tasks/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;  </div><div class="line">    <span class="comment">// business logic for finding a task...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>辣么如何使用post方法呢？</p>
<p>就会用到<code>@apiParam</code> 和 <code>@apiParamExample</code> ，为了解释body里面返回的参数，done=false表示默认值。看下面</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @api &#123;post&#125; /tasks Register a new task</div><div class="line"> * @apiGroup Tasks</div><div class="line"> * @apiParam &#123;String&#125; title Task title</div><div class="line"> * @apiParamExample &#123;json&#125; Input</div><div class="line"> *    &#123;</div><div class="line"> *      "title": "Study"</div><div class="line"> *    &#125;</div><div class="line"> * @apiSuccess &#123;Number&#125; id Task id</div><div class="line"> * @apiSuccess &#123;String&#125; title Task title</div><div class="line"> * @apiSuccess &#123;Boolean&#125; done=false Task is done?</div><div class="line"> * @apiSuccess &#123;Date&#125; updated_at Update date</div><div class="line"> * @apiSuccess &#123;Date&#125; created_at Register date</div><div class="line"> * @apiSuccessExample &#123;json&#125; Success</div><div class="line"> *    HTTP/1.1 200 OK</div><div class="line"> *    &#123;</div><div class="line"> *      "id": 1,</div><div class="line"> *      "title": "Study",</div><div class="line"> *      "done": false,</div><div class="line"> *      "updated_at": "2016-02-10T15:46:51.778Z",</div><div class="line"> *      "created_at": "2016-02-10T15:46:51.778Z"</div><div class="line"> *    &#125;</div><div class="line"> * @apiErrorExample &#123;json&#125; Register error</div><div class="line"> *    HTTP/1.1 500 Internal Server Error</div><div class="line"> */</div><div class="line">app.post(<span class="string">'/tasks'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;  </div><div class="line">    <span class="comment">// business logic for creating a task...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>下面展示put和delete方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @api &#123;put&#125; /tasks/:id Update a task</div><div class="line"> * @apiGroup Tasks</div><div class="line"> * @apiParam &#123;id&#125; id Task id</div><div class="line"> * @apiParam &#123;String&#125; title Task title</div><div class="line"> * @apiParam &#123;Boolean&#125; done Task is done?</div><div class="line"> * @apiParamExample &#123;json&#125; Input</div><div class="line"> *    &#123;</div><div class="line"> *      "title": "Work",</div><div class="line"> *      "done": true</div><div class="line"> *    &#125;</div><div class="line"> * @apiSuccessExample &#123;json&#125; Success</div><div class="line"> *    HTTP/1.1 204 No Content</div><div class="line"> * @apiErrorExample &#123;json&#125; Update error</div><div class="line"> *    HTTP/1.1 500 Internal Server Error</div><div class="line"> */</div><div class="line">app.put(<span class="string">'/tasks/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;  </div><div class="line">    <span class="comment">// business logic for update a task</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * @api &#123;delete&#125; /tasks/:id Remove a task</div><div class="line"> * @apiGroup Tasks</div><div class="line"> * @apiParam &#123;id&#125; id Task id</div><div class="line"> * @apiSuccessExample &#123;json&#125; Success</div><div class="line"> *    HTTP/1.1 204 No Content</div><div class="line"> * @apiErrorExample &#123;json&#125; Delete error</div><div class="line"> *    HTTP/1.1 500 Internal Server Error</div><div class="line"> */</div><div class="line">app.delete(<span class="string">'/tasks/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;  </div><div class="line">    <span class="comment">// business logic for deleting a task</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>ok ,可以生产文档了，使用下面的命令(i 是input代表输入文件夹，o是output代表输出文件夹)</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apidoc  -i public / -o  apidoc  </div><div class="line">node index.js  //(你没有这个js就不要执行这个咯，这个是我上面js用的，监听3000端口的)</div></pre></td></tr></table></figure>
<p>你就可以访问localhost:3000/apidoc，赶紧自己动手试试吧</p>
<p><img src="https://blog.jscrambler.com/content/images/2016/12/api-documented.png" alt="图片例子"></p>
<p>OK，我们已经完成了所有的任务</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、ApiDoc是什么&quot;&gt;&lt;a href=&quot;#一、ApiDoc是什么&quot; class=&quot;headerlink&quot; title=&quot;一、ApiDoc是什么&quot;&gt;&lt;/a&gt;一、ApiDoc是什么&lt;/h3&gt;&lt;p&gt;事实上我们大多时候说的apidoc实际上是apidoc.js，是使用nodejs命令行模块来生成文档的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.jscrambler.com/content/images/2016/12/site-apidocjs.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://blog.vrzart.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>单例模式大比拼</title>
    <link href="http://blog.vrzart.com/2017/05/26/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.vrzart.com/2017/05/26/单例模式/</id>
    <published>2017-05-26T11:14:31.027Z</published>
    <updated>2017-01-10T11:23:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模式大比拼"><a href="#单例模式大比拼" class="headerlink" title="单例模式大比拼"></a>单例模式大比拼</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul>
<li>1、饱汉模式</li>
<li>2、懒汉模式</li>
<li>3、最佳模式（多线程安全）</li>
</ul>
<p>1、饱汉模式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>2、懒汉模式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//一个静态的实例</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</div><div class="line">    <span class="comment">//私有化构造函数</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="comment">//给出一个公共的静态方法返回一个单一实例</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">            singleton = <span class="keyword">new</span> Singleton();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面2种情况在单线程的时候运行良好，多线程模式下会出现问题</p>
<p><strong>解决办法：</strong></p>
<p>（1）、你可以在方法上面加入synchronized关键字（性能低下，及其不推荐）</p>
<p>（2）、同步的地方只是需要发生在单例的实例还未创建的时候，在实例创建以后，获取实例的方法就没必要再进行同步控制了，所以我们将上面的示例改为很多教科书中标准的单例模式版本，也称为<strong>双重加锁</strong>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedSingleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//一个静态的实例</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SynchronizedSingleton synchronizedSingleton;</div><div class="line">    <span class="comment">//私有化构造函数</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SynchronizedSingleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="comment">//给出一个公共的静态方法返回一个单一实例</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SynchronizedSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (synchronizedSingleton == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (SynchronizedSingleton.class) &#123;</div><div class="line">                <span class="keyword">if</span> (synchronizedSingleton == <span class="keyword">null</span>) &#123;</div><div class="line">                    synchronizedSingleton = <span class="keyword">new</span> SynchronizedSingleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> synchronizedSingleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的双重加锁模式在语言层面是ok的，但是jvm层面还是会出问题的</p>
<p>下面一种方法不会出现多线程问题，保证一个实例</p>
<p>3、</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClassSingleton</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> Singleton.singleton;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">protected</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;单例模式大比拼&quot;&gt;&lt;a href=&quot;#单例模式大比拼&quot; class=&quot;headerlink&quot; title=&quot;单例模式大比拼&quot;&gt;&lt;/a&gt;单例模式大比拼&lt;/h1&gt;&lt;h2 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1、饱汉模式&lt;/li&gt;
&lt;li&gt;2、懒汉模式&lt;/li&gt;
&lt;li&gt;3、最佳模式（多线程安全）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1、饱汉模式&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Singleton instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Singleton();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; instance;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="http://blog.vrzart.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>RocketMq小解</title>
    <link href="http://blog.vrzart.com/2017/05/26/RocketMq/"/>
    <id>http://blog.vrzart.com/2017/05/26/RocketMq/</id>
    <published>2017-05-26T11:14:31.019Z</published>
    <updated>2017-01-10T11:39:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>notify是淘宝的一个消息中间件，它用创新地方式解决了分布式事务的问题，用相对较低的成本，实现了跨微服务的最终一致性</p>
<p>消息系统的核心作用就是三点：<strong>解耦，异步和并行</strong></p>
<a id="more"></a>
<p>假设我们有这么一个应用场景，为了完成一个用户注册淘宝的操作，可能需要将用户信息写入到用户库中，然后通知给红包中心给用户发新手红包，然后还需要通知支付宝给用户准备对应的支付宝账号，进行合法性验证，告知sns系统给用户导入新的用户等10步操作。</p>
<p><a href="http://segmentfault.com/img/bVm0uI" target="_blank" rel="external">串行设计</a></p>
<p><img src="http://segmentfault.com/img/bVm0uI" alt="串行设计"></p>
<p>这种方式的最大问题是，随着后端流程越来越多，每步流程都需要额外的耗费很多时间，从而会导致用户更长的等待延迟。自然的，我们可以采用并行的方式来完成业务，能够极大的减少延迟</p>
<p><img src="http://segmentfault.com/img/bVm0uK" alt="串行设计"></p>
<p>但是其实这样也是有问题的，在用户注册这一步，系统并行请求发起4个请求，如果说通知SNS这一步需要时间比较长，即使其他步骤再快，用户任然需要等待10秒才能注册，假如说发红包服务器宕机了，那就不能注册了。</p>
<p>通过业务分析我们能够得知，用户的实际的核心流程其实只有一个，就是用户注册。而后续的准备支付宝，通知sns等操作虽然必须要完成，但却是不需要让用户等待的。</p>
<p>这种模式有个专业的名词，就叫最终一致。为了达到最终一致，我们引入了MQ系统</p>
<p><img src="http://segmentfault.com/img/bVm0uL" alt="主流程"></p>
<p>异步流程如下：</p>
<p><img src="http://segmentfault.com/img/bVm0uM" alt="异步流程"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;notify是淘宝的一个消息中间件，它用创新地方式解决了分布式事务的问题，用相对较低的成本，实现了跨微服务的最终一致性&lt;/p&gt;
&lt;p&gt;消息系统的核心作用就是三点：&lt;strong&gt;解耦，异步和并行&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="消息中间件" scheme="http://blog.vrzart.com/tags/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
</feed>
